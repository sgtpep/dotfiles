#!/bin/bash
set -eu

function configure-apt {
  sudo tee /etc/apt/apt.conf.d/50disable-cache > /dev/null <<< 'Binary::apt::APT::Keep-Downloaded-Packages "false";'
  local release=$(lsb_release -cs)
  sudo tee /etc/apt/sources.list > /dev/null << EOF
deb http://deb.debian.org/debian $release main
deb http://security.debian.org/debian-security $release/updates main
EOF
}

function configure-ssh-server {
  local checksum=$(md5sum /etc/ssh/sshd_config)
  [[ ! $(tail -c 1 /etc/ssh/sshd_config) ]] || sudo tee -a /etc/ssh/sshd_config > /dev/null <<< ''
  grep -q '^GatewayPorts ' /etc/ssh/sshd_config || sudo tee -a /etc/ssh/sshd_config > /dev/null <<< 'GatewayPorts yes'
  grep -q '^UseDNS ' /etc/ssh/sshd_config || sudo tee -a /etc/ssh/sshd_config > /dev/null <<< 'UseDNS no'
  md5sum -c --status <<< $checksum || sudo systemctl reload sshd
}

function download-dotfile {
  if [[ ! -f ~/$1 ]]; then
    [[ $1 != */* ]] || mkdir -p ~/"${1%/*}"
    wget -O ~/"$1" https://raw.githubusercontent.com/sgtpep/dotfiles/master/"$1"
  fi
  [[ $1 != .local/bin/* ]] || chmod +x ~/"$1"
}

email=mail'@'danil.mobi

hostname=danil.mobi

function install-packages {
  update-apt
  dpkg -s "$@" &> /dev/null || sudo DEBIAN_FRONTEND=noninteractive apt -y install "$@"
}

function install-standalone-packages {
  local packages=(
    calibre
    git
    man-db
    ncdu
    rsync
  )
  install-packages "${packages[@]}"
}

function main {
  if [[ -v SSH_CONNECTION ]]; then
    configure-apt
    setup-system
    upgrade-system
  else
    run-actions "$@"
    setup-user
    run-script
  fi
}

function reboot-if-needed {
  if [[ -f /run/reboot-required ]]; then
    read -p 'Reboot? [Y/n] '
    [[ ! $REPLY =~ ^[Yy]*$ ]] || sudo reboot
  fi
}

function run-actions {
  if [[ $@ ]]; then
    if [[ $1 == backup ]]; then
      exec rsync -FOahvz --delete --progress personal: ~/Downloads/personal
    elif [[ $1 == restore ]]; then
      exec rsync -FOahuvz --progress ~/Downloads/personal/ personal:
    else
      return 1
    fi
  fi
}

function run-script {
  ssh -t personal "set -$-; $(< "${BASH_SOURCE[0]}")"
}

function setup-gallery {
  install-packages python3
  download-dotfile .local/bin/generate-gallery
  sudo tee /etc/cron.d/gallery > /dev/null << EOF
PATH=/usr/bin:/bin:/home/$USER/.local/bin
0 0 */5 * * $USER generate-gallery ~/.config/gallery/config ~/www/gallery
0 0 */5 * * $USER generate-gallery ~/.config/ksenia-gallery/config ~/www/ksenia-gallery
EOF
}

function setup-msmtp {
  install-packages msmtp-mta
  sudo tee /etc/aliases > /dev/null <<< "default: $email"
  download-dotfile .local/bin/netrc-password
  download-dotfile .msmtprc
  sed -i "s|\( \)\(netrc-password \)|\1$HOME/.local/bin/\2|" ~/.msmtprc
  sudo ln -fs ~/.msmtprc /etc/msmtprc
  sudo ln -fs ~/.netrc /etc/netrc
}

function setup-nginx {
  install-packages nginx-light
  setup-certbot
  symlink-webroot
  grep -q "^adm:.*\b$USER\b" /etc/group || sudo usermod -a -G adm "$USER"
  local checksum=$(md5sum /etc/nginx/sites-enabled/default)
  sudo tee /etc/nginx/sites-enabled/default > /dev/null << EOF
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  return 301 https://\$host\$request_uri;
}

server {
  add_header Strict-Transport-Security 'max-age=63072000; includeSubDomains; preload';
  gzip on;
  listen 443 ssl default_server;
  listen [::]:443 ssl default_server;
  root /var/www/html;
  ssl_certificate /etc/letsencrypt/live/$hostname/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/$hostname/privkey.pem;

  location ~ ^/(favicon\.ico|robots\.txt)$ {
    access_log off;
    log_not_found off;
  }

  location ~ ^/(gallery|ksenia-gallery)/ {
    auth_basic 'Gallery';
    auth_basic_user_file $HOME/.config/\$1/htpasswd;
  }

  location /shared {
    autoindex on;
    charset UTF-8;
  }
}
EOF
  md5sum -c --status <<< $checksum || sudo systemctl reload nginx
}

function setup-rss2email {
  install-packages rss2email
  sudo tee /etc/cron.d/rss2email > /dev/null << EOF
0 */3 * * * $USER r2e run > /dev/null 2>&1
0 1 * * 0 $USER r2e run 2>&1 | grep -v '^\(HTTP status 5\|sax parsing error:\)'
EOF
}

function setup-certbot {
  install-packages certbot
  [[ ! $(tail -c 1 /etc/letsencrypt/cli.ini) ]] || sudo tee -a /etc/letsencrypt/cli.ini > /dev/null <<< ''
  grep -q '^post-hook ' /etc/letsencrypt/cli.ini || echo 'post-hook = systemctl reload nginx' | sudo tee -a /etc/letsencrypt/cli.ini > /dev/null
  [[ -d /etc/letsencrypt/live ]] || sudo certbot certonly -d "$hostname" -m "$email" -w /var/www/html --agree-tos --no-eff-email --webroot
  sudo rm -fr /var/www/html/.well-known
}

function setup-system {
  configure-ssh-server
  install-standalone-packages
  setup-gallery
  setup-msmtp
  setup-nginx
  setup-rss2email
  setup-tasks
  setup-ufw
  setup-unattended-upgrades
}

function setup-tasks {
  download-dotfile .local/bin/tasks
  install-packages bsd-mailx
  sudo tee /etc/cron.d/tasks > /dev/null << EOF
PATH=/usr/bin:/bin:/home/$USER/.local/bin
0 5 * * * $USER tasks today | mail -E -a "Date: \$(date -R)" -s Today $USER
0 5 * * * $USER tasks tomorrow | mail -E -a "Date: \$(date -R)" -s Tomorrow $USER
0 5 * * 0 $USER tasks | mail -E -a "Date: \$(date -R)" -s Week $USER
EOF
}

function setup-ufw {
  install-packages ufw
  local output=$(sudo ufw status)
  local port
  for port in 22 443 80; do
    grep -q "^$port " <<< $output || sudo ufw allow "$port"
  done
  grep -q ' active$' <<< $output || yes | sudo ufw enable
}

function setup-unattended-upgrades {
  install-packages unattended-upgrades
  sudo sed -i 's/^\/*\(Unattended-Upgrade::Automatic-Reboot \).*/\1"true";/' /etc/apt/apt.conf.d/50unattended-upgrades
}

function setup-user {
  if ! ssh personal '[[ -d ~/.ssh ]]'; then
    ssh root@personal bash -"$-" << EOF
    timedatectl set-timezone '$(readlink /etc/localtime | sed 's|/usr/share/zoneinfo/||')'
    ! id debian &> /dev/null || userdel -r debian
    id $USER &> /dev/null || useradd -m -G sudo -s /bin/bash $USER
    grep -q '^$USER:\$' /etc/shadow || chpasswd -e <<< '$USER:$(sudo grep -Po "(?<=^$USER:)[^:]+" /etc/shadow)'
    cp -r ~/.ssh ~$USER
    chown -R $USER: ~$USER/.ssh
EOF
  fi
}

function symlink-webroot {
  sudo rm -fr /var/www/html
  sudo ln -fs ~/www /var/www/html
}

function update-apt {
  [[ ! $(find /var/cache/apt/pkgcache.bin -mtime +7 2>&1) ]] || sudo apt update
}

function upgrade-system {
  if [[ ! $(zgrep ' full-upgrade\b' /var/log/apt/history.log* || :) ]]; then
    update-apt
    sudo APT_LISTCHANGES_FRONTEND=none DEBIAN_FRONTEND=noninteractive apt -y -o Dpkg::Options::=--force-confnew full-upgrade
    sudo apt -y autoremove --purge
    reboot-if-needed
  fi
}

[[ -v BASH_SOURCE[0] && ${BASH_SOURCE[0]##*/} != ${0##*/} ]] || main "$@"
