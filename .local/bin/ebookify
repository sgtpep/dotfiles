#!/bin/bash
set -eu

function activate-window {
  if [[ -v DISPLAY ]]; then
    local command=(wmctrl -F -a "${0##*/}")
    "${command[@]}" 2> /dev/null || "${command[@]}" || :
  fi
}

articles=articles

function confirm-upload {
  activate-window
  read -p "Upload '$1'? [Y/n] "
  [[ $REPLY =~ ^[Yy]*$ ]]
}

function copy-article {
  rsync -ahsz --progress "$@"
}

function deactivate-links {
  local string='/S /URI'
  sed -i "s|$string\b|$(printf "%${#string}s")|g" "$1"
}

function download-articles {
  local path=/media/$USER/Kindle
  local filename
  while IFS= read -r filename; do
    local article=$articles/$filename
    copy-article personal:"$article" "$path"/documents/"$articles"/"$(sanitize-filename "${filename%.*}")".pdf
    ssh personal xargs -d '\\n' rm <<< $article
  done < <(list-articles)
  unmount "$path"
}

function extract-filename {
  local url=${1%\?*}
  local filename=${url##*/}
  echo "${title//%20/ }"
}

function extract-pdf-title {
  install-packages poppler-utils
  pdfinfo "$1" | grep '^Title:' | sed 's/^[^:]*:\s*\(.*\)\s*$/\1/'
}

declare -A javascript_domains=(
  [warhead.su]=1
)

function list-articles {
  ssh personal ls "$articles"
}

function main {
  if [[ $@ ]]; then
    local url
    for url; do
      process-url "$url"
    done
  else
    download-articles
  fi
}

function process-html {
  install-packages wkhtmltopdf
  echo -n "Processing $1..." >&2
  cd /tmp
  local token='<title>'
  wkhtmltopdf -B 0 -L 0 -R 0 -T 0 --debug-javascript --page-height 297pt --page-width 225pt --run-script "console.log(\`$token\${document.title.trim()}$token\`)" --window-status '' "$1" "$2" |& grep -Po -m 1 "(?<=$token).+(?=$token)"
  cd - > /dev/null
  echo >&2
}

function process-pdf {
  wget -O "$2" "$1"
  local title=$(extract-pdf-title "$2")
  if [[ ! $title ]]; then
    local filename=$(extract-filename "$1")
    title=${filename%.pdf}
  fi
  echo "$title"
}

function process-url {
  set -- "$(rewrite-url "$1")"
  local path=$(temp-path "$1").pdf
  if [[ ${1%\?*} == *.pdf ]]; then
    local title=$(process-pdf "$1" "$path")
  else
    local title=$(process-html "$1" "$path")
  fi
  [[ -f $path ]]
  deactivate-links "$path"
  exiftool -q -overwrite_original -Author="$1" "$path"
  mupdf "$path"
  ! confirm-upload "$title" || upload-article "$path" "$title"
  rm "$path"
}

function rewrite-url {
  if [[ $1 == https://habr.com/* ]]; then
    echo "${1/\/\////m.}"
  else
    echo "$1"
  fi
}

function sanitize-filename {
  local filename=${1//$'\0'/ }
  filename=${filename//$'\n'/ }
  filename=${filename//\\/＼}
  filename=${filename//\//∕}
  filename=${filename//:/꞉}
  filename=${filename//\*/∗}
  filename=${filename//\"/‟}
  filename=${filename//</＜}
  filename=${filename//>/＞}
  filename=${filename//|/❘}
  filename=${filename//\?/？}
  sed -f - <(echo "$filename") << \EOF
s/\s\+/ /g
s/^\s*//
s/\s*$//
EOF
}

function temp-path {
  local checksum=$(md5sum <<< $1)
  echo /tmp/"${checksum%% *}"
}

function truncate-filename {
  local filename=$1
  while (($(wc -c <<< $filename) > 255)); do
    local suffix=.${filename##*.}
    filename=${filename::-$((${#suffix} + 1))}$suffix
  done
  echo "$filename"
}

function upload-article {
  local filename=$(truncate-filename "${2//\//∕}".pdf)
  if list-articles | grep -Fqx "$filename"; then
    echo "'$filename' already exists." >&2
    return 1
  else
    copy-article "$1" personal:"$articles"/"$filename"
  fi
}

[[ -v BASH_SOURCE[0] && ${BASH_SOURCE[0]##*/} != ${0##*/} ]] || main "$@"
