#!/bin/bash
set -eu

function confirm-upload {
  [[ ! -v DISPLAY ]] || wmctrl -F -a "${0##*/}" || :
  read -p "Upload '$1'? [Y/n] "
  [[ $REPLY =~ ^[Yy]*$ ]]
}

function download-articles {
  local path=/media/$USER/Kindle
  scp -r personal:articles "$path"/documents
  ssh personal 'rm -fr ~/articles/*'
  devmon --unmount "$path"
}

function extract-filename {
  local url=${1%\?*}
  echo "${url##*/}"
}

function extract-title {
  install-packages poppler-utils
  pdfinfo "$1" | grep '^Title:' | sed 's/^.*:\s*//'
}

function main {
  if [[ $@ ]]; then
    local url
    for url; do
      process-url "$url"
    done
  else
    download-articles
  fi
}

function parse-title {
  wget -q -O - -U 'Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0' --no-check-certificate "$1" | grep -Pio -m 1 '[^>]*(?=</title>)' | tr '\0' ' ' | w3m -T text/html -dump | tr -d '\n'
}

function process-html-url {
  [[ $1 != *://habr.com/* ]] || set -- "${1/\/\////m.}" "${@:2}"
  [[ $1 != *://medium.com/* ]] || local options=(-n)
  install-packages wkhtmltopdf
  wkhtmltopdf -B 0 -L 0 -R 0 -T 0 --page-height 297pt --page-width 225pt "${options[@]}" "$1" "$2" || :
  echo "$(parse-title "$1")"
}

function process-pdf-url {
  wget -O "$2" "$1"
  local title=$(extract-title "$2")
  if [[ ! $title ]]; then
    local filename=$(extract-filename "$1")
    title=${filename%.pdf}
    title=${title/%20/ }
  fi
  echo "$title"
}

function process-url {
  local path=/tmp/${0##*/}.pdf
  if [[ ${1%\?*} == *.pdf ]]; then
    local title=$(process-pdf-url "$1" "$path")
  else
    local title=$(process-html-url "$1" "$path")
  fi
  exiftool -overwrite_original -Author="$1" "$path"
  mupdf "$path"
  local sanitized_title=$(sanitize-filename "$title")
  ! confirm-upload "$sanitized_title" || upload-article "$path" "$sanitized_title"
}

function sanitize-filename {
  sed -f - <(echo "$1") << \EOF
s/[\\\/:] / â€” /g
s/[\x0*"<>|\n]/ /g
s/[\\\/:]/-/g
s/\s\+/ /g
s/-\+/-/g
EOF
}

function upload-article {
  local filename=$2.pdf
  if ssh personal ls articles | grep -Fqx "$filename"; then
    echo "'$filename' already exists." >&2
    return 1
  else
    rsync -asvz "$1" personal:articles/"$filename"
  fi
}

[[ -v BASH_SOURCE[0] && ${BASH_SOURCE[0]##*/} != ${0##*/} ]] || main "$@"
