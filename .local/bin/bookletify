#!/bin/bash
set -eu

function install-packages {
  local packages=("$@")

  dpkg -s "${packages[@]}" &> /dev/null || sudo apt -y install "${packages[@]}"
}

function pdfjam {
  local output=$(command "${FUNCNAME[0]}" "$@" 2>&1)
  echo "$output" >&2
  [[ $output != *' pdfjam ERROR:'* ]]
}

function pdfjoin {
  pdfjam --fitpaper true "$@"
}

function generate-range {
  local input=$1
  local range=$2
  local cover=$3

  local output=${input%.pdf}.$range.pdf

  if [[ $range == {} ]]; then
    pdfjoin -o "$output" "$input" {},1

    local copy=$output~
    pdfjoin -o "$copy" "$output" 1
    mv "$copy" "$output"
  elif [[ $range == ^ || $range == ^- ]]; then
    local path=${input%.pdf}.$cover.pdf

    [[ $range != ^ ]] || pdfjoin -o "$output" "$path" 1

    local copy=$path~
    pdfjoin -o "$copy" "$path" 2-
    mv "$copy" "$path"
  else
    local name=${range%x2}
    pdfjoin -o "$output" "$input" "$name"

    if [[ $range == *x2 ]]; then
      local copy=$output~
      mutool poster -x 2 "$output" "$copy" || pdfposter -p 2x1a4 "$output" "$copy"
      mv "$copy" "$output"
    fi
  fi

  [[ $range == ^- ]] || echo "$output"
}

function generate-ranges {
  local input=$1
  shift
  local cover=$1

  local range
  for range; do
    generate-range "$input" "$range" "$cover"
  done
}

function page-size {
  local path=${@: -1}
  [[ $path != *.^.pdf ]] || path=${@: -2:1}

  pdfinfo "$path" | grep -Po -m 1 '[\d.]+ x [\d.]+' | sed 's/ x / /'
}

function normalize-size {
  local paths=("$@")

  local width height
  read width height < <(page-size "${paths[@]}")

  local path
  for path; do
    local copy=$path~
    local size="{${width}pt,${height}pt}"
    pdfjam -o "$copy" --papersize "$size" "$path"
    mv "$copy" "$path"
  done
}

function concatenate-ranges {
  local output=$1
  shift
  local paths=("$@")

  pdfjoin -o "$output" "${paths[@]}"
  rm -f "${paths[@]}"
}

function generate-booklet {
  local input=$1
  local output=$2

  pdfbook2 -b 0 -i 0 -o 0 -t 0 "$input"

  local source=${input%.pdf}-book.pdf
  mv "$source" "$output"
}

function main {
  local path=$1
  shift

  install-packages mupdf-tools pdfposter poppler-utils texlive-extra-utils

  local input=$path

  if [[ $# > 1 ]]; then
    local cover=$1
    shift
    local ranges=("$@")

    local paths
    mapfile -t paths < <(generate-ranges "$input" "$cover" "${ranges[@]}")
    [[ ${paths[@]} ]]

    normalize-size "${paths[@]}"

    input=${path%.pdf}.preview.pdf
    concatenate-ranges "$input" "${paths[@]}"
  fi

  local output=${path%.pdf}.book.pdf
  generate-booklet "$input" "$output"
}

[[ ${BASH_SOURCE[0]} != $0 ]] || main "$@"
