#!/bin/bash
set -eu

function clone-dotfiles {
  if [[ ! -d ~/.git ]]; then
    install-packages git
    git -C ~ init
    git -C ~ remote add origin https://"${repository%/*}"@github.com/"$repository".git
    git -C ~ fetch
    git -C ~ checkout -ft origin/master
    git -C ~ ls-files | grep -Po '.+(?=\.orig$)' | xargs -r -I {} -d '\n' cp ~/{}{.orig,}
    rm ~/LICENSE
    configure-dotfiles
  fi
}

function configure-brightness {
  declare -A brightness=(
    [intel_backlight]=500
    [rpi_backlight]=25
  )
  local dirname
  for dirname in "${!brightness[@]}"; do
    local path=/sys/class/backlight/$dirname
    [[ ! -d $path ]] || sudo tee "$path"/brightness > /dev/null <<< ${brightness[$dirname]}
  done
}

function configure-console-font {
  sudo sed -i 's/^\(FONTFACE="\)[^"]*/\1VGA/' /etc/default/console-setup
}

function configure-console-keyboard {
  sudo sed -i 's/^\(XKBLAYOUT="\)[^"]*/\1us/' /etc/default/keyboard
}

function configure-dotfiles {
  [[ ! -f ~/.ssh/id_rsa ]] || git -C ~ remote set-url origin git@github.com:"$repository".git
  git -C ~ config status.showUntrackedFiles no
  git -C ~ update-index --assume-unchanged LICENSE
}

function configure-grub {
  local path=/etc/default/grub
  local checksum=$(md5sum "$path")
  grep -q '^GRUB_TIMEOUT_STYLE=' "$path" || sudo tee -a "$path" > /dev/null <<< 'GRUB_TIMEOUT_STYLE=hidden'
  sudo sed -i -f - "$path" << \EOF
s/^#*\(GRUB_TERMINAL=\).*/\1console/
s/^\(GRUB_CMDLINE_LINUX_DEFAULT\)=.*/\1="quiet loglevel=3"/
s/^\(GRUB_TIMEOUT=\).*/\11/
EOF
  md5sum -c --status <<< "$checksum" || sudo update-grub
}

function configure-hostname {
  sudo hostnamectl set-hostname localhost
}

function configure-initramfs {
  local modprobe=/etc/modprobe.d
  local modprobe_checksum=$(cat "$modprobe"/* 2> /dev/null | md5sum)
  local modules=/etc/initramfs-tools/modules
  local modules_checksum=$(md5sum "$modules")
  if [[ $(product-name) == 'HP Stream '* ]]; then
    sudo tee "$modprobe"/i2c-hid.conf > /dev/null <<< 'blacklist i2c-hid'
    grep -qx 'i915' "$modules" || sudo tee -a "$modules" > /dev/null <<< 'i915'
  fi
  [[ $(cat "$modprobe"/* 2> /dev/null | md5sum) == $modprobe_checksum ]] && md5sum -c --status <<< "$modules_checksum" || sudo update-initramfs -u
}

function configure-locale {
  sudo sed -i 's/^#* *\(en_US\.UTF-8 \)/\1/' /etc/locale.gen
  local path=/etc/default/locale
  [[ $(< "$path") == 'LANG=en_US.UTF-8' ]] || sudo locale-gen
  sudo tee "$path" > /dev/null <<< 'LANG=en_US.UTF-8'
}

function configure-nopasswd {
  declare -A commands=(
    [acpi]=/etc/acpi/default.sh
    [apt-install]='/usr/bin/apt -y install *'
    [apt-update]='/usr/bin/apt update'
    [rfkill]=/usr/sbin/rfkill
    [sshuttle]='/usr/bin/python3 /usr/bin/sshuttle --method auto --firewall'
  )
  [[ $(os-release) != raspbian ]] || commands[poweroff]=/sbin/poweroff
  local name
  for name in "${!commands[@]}"; do
    sudo tee /etc/sudoers.d/"$name" > /dev/null <<< "%sudo ALL = NOPASSWD: SETENV: ${commands[$name]}"
  done
}

function configure-raspbian-cmdline {
  ! dpkg -s plymouth &> /dev/null || sudo apt -y purge plymouth
  sudo sed -i -f - /boot/cmdline.txt << \EOF
s/\b\(console=tty\)[^ ]*/\16/
s/ rootwait$/\0 loglevel=3 logo.nologo/
EOF
}

function configure-raspbian-config {
  declare -A options=(
    [boot_delay]=0
    [disable_splash]=1
    [display_lcd_rotate]=2
    [dtoverlay]=pi3-disable-bt
  )
  local option
  for option in "${!options[@]}"; do
    local path=/boot/config.txt
    if grep -q "^$option=" "$path"; then
      sudo sed -i "s/^\($option=\).*/\1${options[$option]}/" "$path"
    else
      sudo tee -a "$path" > /dev/null <<< "$option=${options[$option]}"
    fi
  done
}

function configure-raspbian-mirror {
  sudo sed -i 's/\braspbian\.raspberrypi\.org\b/mirrordirector.raspbian.org/' /etc/apt/sources.list
}

function configure-timezone {
  sudo ln -fs /usr/share/zoneinfo/Europe/Moscow /etc/localtime
}

function create-raspbian-user {
  id "$username" &> /dev/null || sudo useradd -m -G adm,audio,cdrom,dialout,games,gpio,i2c,input,netdev,plugdev,spi,sudo,users,video -s /bin/bash "$username"
  sudo grep -q "^$username:\\$" /etc/shadow || sudo passwd "$username"
  grep -q '^sudo:.*\bpi\b' /etc/group || gpasswd -d pi sudo
}

function disable-dhcp-wait {
  sudo rm -f /etc/systemd/system/dhcpcd.service.d/wait.conf
}

function disable-pam-mail {
  sudo sed -i 's/^[^#].* pam_mail\.so /#\0/' /etc/pam.d/*
}

function disable-power-key {
  [[ $(product-name) == VirtualBox ]] || sudo sed -i 's/^#*\(HandlePowerKey=\).*/\1ignore/' /etc/systemd/logind.conf
}

function enable-archive-area {
  local path=/etc/apt/sources.list.d/$1${2+-$2}.list
  if [[ ! -f $path ]]; then
    sudo tee "$path" > /dev/null <<< "deb http://deb.debian.org/debian $(lsb_release -cs)${2+-$2} $1"
    sudo apt update -o APT::Get::List-Cleanup=0 -o Dir::Etc::sourcelist="$path" -o Dir::Etc::sourceparts=-
  fi
}

function enable-autologin {
  local path=/etc/systemd/system/getty@tty1.service.d
  sudo mkdir -p "$path"
  sudo tee "$path"/autologin.conf > /dev/null << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty -a $USER %I
EOF
}

function enable-block-wifi {
  local name=block-wifi
  sudo tee /etc/systemd/system/"$name".service > /dev/null << \EOF
[Install]
WantedBy=multi-user.target

[Service]
ExecStart=/usr/sbin/rfkill block wifi
Type=oneshot
EOF
  sudo systemctl enable "$name"
  sudo systemctl mask systemd-rfkill
}

function enable-fstrim {
  local path=/usr/share/doc/util-linux/examples/fstrim.service
  sudo ln -fs "$path" /etc/systemd/system
  sudo systemctl enable "${path%.*}".timer
}

function fix-efi {
  local path=/boot/efi/EFI
  sudo mkdir -p "$path"/boot
  sudo cp "$path"/{debian/grubx64.efi,boot/bootx64.efi}
}

function install-firmware {
  if [[ $(product-name) == 'HP Stream '* ]]; then
    enable-archive-area non-free
    install-packages firmware-iwlwifi
  fi
}

function install-packages {
  update-apt
  local packages=("${@%/*}")
  dpkg -s "${packages[@]}" &> /dev/null || sudo DEBIAN_FRONTEND=noninteractive apt -y install "${packages[@]}"
}

function main {
  if [[ $(os-release) == raspbian ]] && [[ $USER == pi ]]; then
    create-raspbian-user
    exec sudo -u "$username" bash -"$-" "$0" "$@"
  else
    clone-dotfiles
    setup-system
    install-packages unattended-upgrades
    upgrade-system
  fi
}

function os-release {
  grep -Po '(?<=^ID=).+' /etc/os-release
}

function product-name {
  local path=/sys/class/dmi/id/product_name
  [[ ! -f $path ]] || echo "$(< "$path")"
}

function reboot-if-needed {
  if [[ -f /run/reboot-required ]]; then
    read -p 'Reboot? [Y/n] '
    [[ ! $REPLY =~ ^[Yy]*$ ]] || sudo reboot
  fi
}

repository=sgtpep/dotfiles2

function schedule-syncing {
  local command='[ ! -f ~/.ssh/id_rsa ] || flock /tmp/sync-all.lock sync-all'
  sudo tee /etc/cron.d/sync-all > /dev/null << EOF
PATH=/usr/bin:/bin:/home/$USER/.local/bin
0 * * * * $USER $command
@reboot $USER $command
EOF
}

function setup-acpid {
  install-packages acpid
  sudo ln -fs /usr/share/doc/acpid/examples/default /etc/acpi/events
  local path=/etc/acpi/default.sh
  sudo tee "$path" > /dev/null << \EOF
#!/bin/bash
set -eu
if [[ $1 == video/brightness* ]]; then
  for path in /sys/class/backlight/*; do
    ! cd "$path" 2> /dev/null || break
  done
  if [[ $1 == *down ]]; then
    expression='/ 3 * 2'
  elif [[ $1 == *up ]]; then
    expression='* 3 / 2'
  fi
  echo "$(("$(< brightness)" "$expression"))" > brightness
fi
EOF
  sudo chmod +x "$path"
}

function setup-debian {
  if [[ $(os-release) == debian ]]; then
    configure-grub
  fi
}

function setup-nginx {
  install-packages nginx
  [[ $(os-release) != raspbian ]] || sudo systemctl disable nginx
}

function setup-raspbian {
  if [[ $(os-release) == raspbian ]]; then
    configure-console-keyboard
    configure-hostname
    configure-locale
    configure-raspbian-cmdline
    configure-raspbian-config
    configure-raspbian-mirror
    configure-timezone
    disable-dhcp-wait
    enable-block-wifi
  fi
}

function setup-system {
  configure-brightness
  configure-console-font
  configure-initramfs
  configure-nopasswd
  disable-pam-mail
  disable-power-key
  enable-autologin
  enable-fstrim
  schedule-syncing
  setup-acpid
  setup-debian
  setup-nginx
  setup-raspbian
  setup-virtualbox
}

function setup-virtualbox {
  if [[ $(product-name) == VirtualBox ]]; then
    fix-efi
    setup-virtualbox-guest
  fi
}

function setup-virtualbox-guest {
  enable-archive-area contrib backports
  install-packages virtualbox-guest-x11/"$(lsb_release -cs)"-backports
  sudo usermod -a -G vboxsf "$USER"
}

function update-apt {
  [[ ! $(find /var/cache/apt/pkgcache.bin -mtime +7 2>&1) ]] || sudo apt update
}

function upgrade-system {
  if [[ ! $(zgrep ' full-upgrade\b' /var/log/apt/history.log* || :) ]]; then
    update-apt
    sudo APT_LISTCHANGES_FRONTEND=none DEBIAN_FRONTEND=noninteractive apt -y -o Dpkg::Options::=--force-confnew full-upgrade
    sudo apt -y autoremove --purge
    reboot-if-needed
  fi
}

username=danil

[[ -v BASH_SOURCE[0] && ${BASH_SOURCE[0]##*/} != ${0##*/} ]] || main "$@"
