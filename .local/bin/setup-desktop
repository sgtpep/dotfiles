#!/bin/bash
set -eu

function install-dpkg-packages {
  local packages=(
    adb
    aria2
    curl
    dconf-editor
    exiftran
    ffmpeg
    firejail
    flatpak
    gimp
    git
    graphicsmagick-imagemagick-compat
    htop
    libimage-exiftool-perl
    mutt
    ncal
    ncdu
    pass
    poppler-utils
    python3-pip
    rclone
    ripgrep
    rsync
    sdcv
    sqlite3
    sshuttle
    tmux
    vifm
    vim-gtk3
    w3m
    webext-ublock-origin-chromium
    xsel
  )
  local dpkg_packages=(${packages[@]/%*-})
  dpkg -s "${dpkg_packages[@]}" &> /dev/null || sudo DEBIAN_FRONTEND=noninteractive apt -y install "${packages[@]}"
}

function install-snap-packages {
  local packages=(
    chromium
  )
  local package
  for package in "${packages[@]}"; do
    snap list | grep -q "^$package " || sudo snap install "$package"
  done
}

vscodium_app=com.vscodium.codium

function install-flatpak-apps {
  local apps=(
    "$vscodium_app"
  )
  if ! flatpak info "${apps[@]}" &> /dev/null; then
    local app
    for app in "${apps[@]}"; do
      sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo                              
      sudo flatpak install -y flathub "$app"
    done
  fi
}

pip_path=~/.pip

function patch-pwdhash {
  sed -i $'s/\\bsys\.stdout\.write(generated\\b.*/import subprocess; subprocess.run([\'xsel\', \'-b\'], input=generated.encode(\'utf8\'))/' "$pip_path"/lib/python3.*/site-packages/pwdhash.py
}

function install-pip-packages {
  local packages=(
    gnome_extensions_cli
    pwdhash.py
    youtube_dl
  )
  local package
  for package in "${packages[@]}"; do
    ls "$pip_path"/lib/python3.*/site-packages/"$package" &> /dev/null || PYTHONUSERBASE=$pip_path pip3 install "$package"
  done
  patch-pwdhash
}

function install-gnome-extensions {
  local extensions=(
    no-title-bar@jonaspoehler.de
    no_activities@yaya.cout
    remove-dropdown-arrows@mpdeimos.com
    transparent-top-bar@ftpix.com
  )
  local extension
  for extension in "${extensions[@]}"; do
    [[ -d ~/.local/share/gnome-shell/extensions/$extension ]] || PATH=$PATH:$pip_path/bin PYTHONUSERBASE=$pip_path gnome-extensions-cli install "$extension"
  done
}

function install-vscodium-extensions {
  local extensions=(
    vscodevim.vim
  )
  local command=()
  local extension
  for extension in "${extensions[@]}"; do
    ls ~/.var/app/"$vscodium_app"/data/codium/extensions/"$extension"-* &> /dev/null || flatpak run "$vscodium_app" --install-extension "$extension"
  done
}

function install-npm-completions {
  local path=~/.local/share/bash-completion/completions/npm
  if [[ ! -f $path ]]; then
    mkdir -p "${path%/*}"
    PATH=~/.npm/bin:$PATH npm completion > "$path"
  fi
}

function install-node {
  local prefix=~/.npm
  if [[ ! -x $prefix/bin/node ]]; then
    local arch=$(arch)
    arch=${arch/aarch64/arm64}
    arch=${arch/x86_64/x64}
    local version=14.0.0
    local url=https://nodejs.org/dist/v$version/node-v$version-linux-$arch.tar.xz
    local path=/tmp/${url##*/}
    wget -O "$path" "$url" || rm -f "$path"
    tar -x -C "${path%/*}" -f "$path"
    NPM_CONFIG_PREFIX=$prefix PATH=${path%.*.*}/bin:$PATH npm install -g node npm
  fi
  install-npm-completions
}

function install-packages {
  install-dpkg-packages
  install-snap-packages
  install-flatpak-apps
  install-pip-packages
  install-gnome-extensions
  install-vscodium-extensions
  install-node
}

function is-raspberry-pi {
  local path=/proc/device-tree/model
  [[ -f $path && $(head -c -1 "$path") == Raspberry\ Pi\ * ]]
}

function configure-raspberry-pi-display {
  if is-raspberry-pi; then
    local line=lcd_rotate=2
    local path=/boot/firmware/config.txt
    grep -qx "$line" "$path" || sudo tee -a "$path" > /dev/null <<< $line
    local name=rpi-backlight-poweroff
    sudo tee /etc/systemd/system/"$name".service > /dev/null << \EOF
[Unit]
DefaultDependencies=no

[Service]
ExecStart=/bin/sh -c '/bin/echo 1 > /sys/class/backlight/rpi_backlight/bl_power'
Type=oneshot

[Install]
WantedBy=halt.target poweroff.target reboot.target
EOF
    [[ -h /etc/systemd/system/poweroff.target.wants/$name.service ]] || sudo systemctl enable "$name"
    dconf write /org/gnome/settings-daemon/plugins/xsettings/rgba-order "'bgr'"
  fi
}

function configure-exitensions {
  dconf write /com/ftpix/transparentbar/transparency 100
  dconf write /org/gnome/shell/extensions/no-title-bar/button-position "'before-status-area'"
}

function configure-terminal {
  local path=/org/gnome/terminal/legacy
  dconf write "$path"/default-show-menubar false
  dconf write "$path"/headerbar '@mb false'
  dconf write "$path"/keybindings/copy "'<Ctrl><Alt>c'"
  dconf write "$path"/keybindings/paste "'<Ctrl><Alt>v'"
  local profile_path=$path/profiles:/:$(gsettings get org.gnome.Terminal.ProfilesList default | sed $'s/^\'\(.*\)\'$/\\1/')
  dconf write "$profile_path"/background-color "'rgb(255,255,255)'"
  dconf write "$profile_path"/font "'Monospace 13'"
  dconf write "$profile_path"/foreground-color "'rgb(0,0,0)'"
  dconf write "$profile_path"/scrollbar-policy "'never'"
  dconf write "$profile_path"/use-system-font false
  dconf write "$profile_path"/use-theme-colors false
}

function configure-settings {
  configure-exitensions
  configure-terminal
  dconf write /org/gnome/deja-dup/prompt-check "'disabled'"
  dconf write /org/gnome/desktop/input-sources/per-window true
  dconf write /org/gnome/desktop/input-sources/sources "[('xkb', 'us'), ('xkb', 'ru')]"
  dconf write /org/gnome/desktop/input-sources/xkb-options "['ctrl:nocaps', 'grp:rshift_toggle', 'lv3:ralt_switch', 'misc:typo']"
  dconf write /org/gnome/desktop/interface/clock-format "'12h'"
  dconf write /org/gnome/desktop/interface/cursor-blink false
  dconf write /org/gnome/desktop/interface/font-name "'Liberation Sans 11'"
  dconf write /org/gnome/desktop/interface/monospace-font-name "'Mono 12'"
  dconf write /org/gnome/desktop/privacy/remove-old-temp-files true
  dconf write /org/gnome/desktop/privacy/remove-old-trash-files true
  dconf write /org/gnome/desktop/screensaver/lock-enabled false
  dconf write /org/gnome/desktop/wm/preferences/titlebar-font "'Liberation Sans Bold 11'"
  dconf write /org/gnome/shell/extensions/dash-to-dock/dock-fixed false
  dconf write /org/gnome/shell/extensions/desktop-icons/show-home false
  dconf write /org/gnome/shell/extensions/desktop-icons/show-mount false
  dconf write /org/gnome/shell/extensions/desktop-icons/show-trash false
  dconf write /org/gnome/shell/favorite-apps "['chromium_chromium.desktop', 'org.gnome.Terminal.desktop']"
}

function disable-connectivity-checking {
  local path=/var/lib/NetworkManager/NetworkManager-intern.conf
  local checksum=$(sudo md5sum "$path")
  sudo sed -i 's/\(^\.set\.enabled=\).*/\1false/' "$path"
  sudo md5sum -c --status <<< $checksum || sudo systemctl restart NetworkManager
}

function disable-transient-hostname {
  local line=hostname-mode=none
  local path=/etc/NetworkManager/NetworkManager.conf
  grep -qx "$line" "$path" || sudo sed -i "/^plugins=/a $line" "$path"
}

function configure-system {
  configure-raspberry-pi-display
  configure-settings
  disable-connectivity-checking
  disable-transient-hostname
}

keys_path=/media/$USER/keys

function copy-ssh-key {
  local path=~/.ssh/id_rsa
  if [[ ! -f $path ]]; then
    cp "$keys_path"/"${path##*/}" "$path"
    chmod 600 "$path"
  fi
}

function clone-dotfiles {
  if [[ ! -d ~/.git ]]; then
    cd ~
    git init
    git remote add origin git@github.com:sgtpep/dotfiles.git
    git fetch
    git checkout -f master
    git ls-files | grep -Po '.+(?=\.orig$)' | xargs -r -I {} -d '\n' cp ~/{}{.orig,}
    cd - > /dev/null
  fi
}

function clone-repositories {
  declare -A repositories=(
    [notes]=~/notes
    [pass]=~/.password-store
  )
  local name
  for name in "${!repositories[@]}"; do
    local path=${repositories[$name]}
    if [[ ! -d $path ]] && ! git clone personal:repositories/"$name".git "$path"; then
      rm -fr "$path"
      return 1
    fi
  done
}

function copy-netrc {
  local path=~/.netrc
  [[ -f $path ]] || scp personal:"${path#~/}" "$path"
}

function download-dictionaries {
  local url
  for url in http://download.huzheng.org/lingvo/stardict-{ER,RE}-LingvoUniversal-2.4.2.tar.bz2; do
    local filename=${url##*/}
    local path=~/.stardict/dic/${filename%.*.*}
    if [[ ! -d $path ]]; then
      mkdir -p "$path"
      if ! wget -O - "$url" | tar -jx -C "${path%/*}"; then
        rm -fr "$path"
        return 1
      fi
    fi
  done
}

function import-gpg-key {
  if ! ls ~/.gnupg/private-keys-v1.d/*.key &> /dev/null; then
    gpg --import "$keys_path"/private-key.asc
    gpg --import-ownertrust <<< "$(gpg -k --with-colons | grep -Po -m 1 '(?<=^fpr:::::::::)[^:]+'):6:"
  fi
}

function setup-home {
  clone-dotfiles
  clone-repositories
  copy-netrc
  download-dictionaries
  import-gpg-key
}

function main {
  install-packages
  configure-system
  copy-ssh-key
  setup-home
}

[[ -v BASH_SOURCE[0] && ${BASH_SOURCE[0]##*/} != ${0##*/} ]] || main "$@"
