#!/bin/bash
set -eu

ssh_key_path=~/.ssh/id_rsa

function clone-dotfiles {
  if [[ ! -d ~/.git ]]; then
    cd ~
    git init
    local hostname=github.com
    local repository=sgtpep/dotfiles
    if [[ -f $ssh_key_path ]]; then
      local url=git@$hostname:$repository.git
    else
      local url=https://${repository%/*}@$hostname/$repository.git
    fi
    git remote add origin "$url"
    git fetch
    git checkout -f master
    git ls-files | grep -Po '.+(?=\.orig$)' | xargs -r -I {} -d '\n' cp ~/{}{.orig,}
    cd - > /dev/null
  fi
}

function copy-netrc {
  local path=~/.netrc
  [[ -f $path ]] || scp personal:"${path#~/}" "$path"
}

keys_path=/dev/disk/by-label/keys

function copy-ssh-key {
  if [[ ! -f $ssh_key_path ]]; then
    local mountpoint=/mnt
    sudo mount "$keys_path" "$mountpoint"
    cp "$mountpoint"/"${ssh_key_path##*/}" "$ssh_key_path"
    sudo umount "$mountpoint"
    chmod 600 "$ssh_key_path"
    sed -i 's|\bhttps://.*\(@github\.com\)/|git\1:|' ~/.git/config
    until ssh-keygen -p -N '' -f "$ssh_key_path"; do
      :
    done
  fi
}

function import-gpg-key {
  local path=~/.gnupg
  if ! ls "$path"/private-keys-v1.d/*.key &> /dev/null; then
    chmod 700 "$path"
    local mountpoint=/mnt
    sudo mount "$keys_path" "$mountpoint"
    gpg --import "$mountpoint"/private-key.asc
    sudo umount "$mountpoint"
    gpg --import-ownertrust <<< "$(gpg -k --with-colons | grep -Po -m 1 '(?<=^fpr:::::::::)[^:]+'):6:"
  fi
}

function install-packages {
  local packages=(
    acpi
    acpid
    adb
    apcalc
    aria2
    awesome
    bash{,-completion}
    build-essential
    chromium
    clipit
    curl
    dbus-x11
    exiftran
    ffmpeg
    firejail
    fonts-liberation2
    gimp
    git
    graphicsmagick-imagemagick-compat
    htop
    isync
    libimage-exiftool-perl
    libnotify-bin
    libreoffice
    mpv youtube-dl-
    msmtp-mta
    mupdf
    mutt
    ncdu
    openssh-client
    pass
    poppler-utils
    pulseaudio
    pulsemixer
    python3{,-pip}
    rclone fuse
    ripgrep
    rsync
    rxvt-unicode
    sdcv
    sqlite3
    sshuttle
    suckless-tools
    sxiv
    tmux
    udisks2
    unattended-upgrades
    unzip
    vifm
    vim-gtk3
    w3m
    webext-ublock-origin
    wget
    xinit
    xsel
    xserver-xorg
  )
  local dpkg_packages=(${packages[@]/%*-})
  dpkg -s "${dpkg_packages[@]}" &> /dev/null || sudo apt -y install "${packages[@]}"
}

function clone-personal-repository {
  if [[ ! -d $2 ]] && ! git clone personal:repositories/"$1".git "$2"; then
    rm -fr "$2"
    return 1
  fi
}

function clone-notes {
  clone-personal-repository notes ~/notes
}

function clone-password-store {
  clone-personal-repository pass ~/.password-store
}

function download-dictionaries {
  local url
  for url in http://download.huzheng.org/lingvo/stardict-{ER,RE}-LingvoUniversal-2.4.2.tar.bz2; do
    local filename=${url##*/}
    local path=~/.stardict/dic/${filename%.*.*}
    if [[ ! -d $path ]]; then
      mkdir -p "$path"
      if ! wget -O - "$url" | tar -jx -C "${path%/*}"; then
        rm -fr "$path"
        return 1
      fi
    fi
  done
}

function install-node {
  local prefix=~/.npm
  if [[ ! -x $prefix/bin/node ]]; then
    local arch=$(arch)
    local version=14.0.0
    local url=https://nodejs.org/dist/v$version/node-v$version-linux-${arch/x86_64/x64}.tar.xz
    local path=/tmp/${url##*/}
    wget -O "$path" "$url" || rm -f "$path"
    tar -x -C "${path%/*}" -f "$path"
    NPM_CONFIG_PREFIX=$prefix PATH=${path%.*.*}/bin:$PATH npm install -g node npm
  fi
}

function install-pip-packages {
  local packages=(
    pwdhash.py
    youtube_dl
  )
  local package
  for package in "${packages[@]}"; do
    local base=~/.pip
    ls "$base"/lib/python3.*/site-packages/"$package" &> /dev/null || PYTHONUSERBASE=$base pip3 install "$package"
  done
  sed -i $'s/\\bsys\.stdout\.write(generated\\b.*/import subprocess; subprocess.run([\'xsel\', \'-b\'], input=generated.encode(\'utf8\'))/' "$base"/lib/python3.*/site-packages/pwdhash.py
}

function make-downloads {
  mkdir -p ~/Downloads
}

function sync-mail {
  local path=~/mail/Inbox
  mkdir -p "${path%/*}"
  [[ -d $path ]] || mbsync -a
}

function setup-home {
  clone-notes
  clone-password-store
  download-dictionaries
  install-node
  install-pip-packages
  make-downloads
  sync-mail
}

function configure-acpid {
  sudo ln -fs /lib/systemd/system/acpid.service /etc/systemd/system/multi-user.target.wants
  sudo ln -fs /usr/share/doc/acpid/examples/default /etc/acpi/events
  local path=/etc/acpi/default.sh
  sudo tee "$path" > /dev/null << \EOF
#!/bin/bash
set -eu
if [[ $1 == video/brightness* ]]; then
  if [[ $1 == *down ]]; then
    operation=-
  elif [[ $1 == *up ]]; then
    operation=+
  fi
  path=(/sys/class/backlight/*/brightness)
  brightness=$(($(< "$path") $operation 1))
  echo "$brightness" > "$path"
fi
EOF
  sudo chmod +x "$path"
}

function configure-console-font {
  local path=/etc/default/console-setup
  local checksum=$(md5sum "$path")
  sudo sed -i 's/^\(FONTFACE="\)[^"]*/\1VGA/' "$path"
  md5sum -c --status <<< $checksum || sudo setupcon --save-only
}

function configure-grub {
  local path=/etc/default/grub
  local checksum=$(md5sum "$path")
  local line='GRUB_TIMEOUT_STYLE=hidden'
  grep -Fqx "$line" "$path" || sudo tee -a "$path" > /dev/null <<< $line
  sudo sed -i -f - "$path" << \EOF
s/^#*\(GRUB_TERMINAL=\).*/\1console/
s/^\(GRUB_CMDLINE_LINUX_DEFAULT\)=.*/\1="quiet loglevel=3"/
s/^\(GRUB_TIMEOUT=\).*/\11/
EOF
  md5sum -c --status <<< $checksum || sudo update-grub
}

function configure-inotify {
  sudo tee /etc/sysctl.d/50-inotify.conf > /dev/null <<< 'fs.inotify.max_user_watches = 524288'
}

function disable-transient-hostname {
  sudo sed -i 's/, host-name\b//' /etc/dhcp/dhclient.conf
}

function enable-autologin {
  local path=/etc/systemd/system/getty@tty1.service.d
  sudo mkdir -p "$path"
  sudo tee "$path"/autologin.conf > /dev/null << EOF
[Service]
ExecStart=
ExecStart=-/usr/sbin/agetty -a $USER %I
EOF
}

function enable-fstrim {
  sudo ln -fs /lib/systemd/system/fstrim.timer /etc/systemd/system/timers.target.wants
}

function schedule-mbsync {
  local command=mbsync
  sudo tee /etc/cron.d/"$command" > /dev/null <<< "10 * * * * $USER $command -a"
}

function setup-system {
  configure-acpid
  configure-console-font
  configure-grub
  configure-inotify
  disable-transient-hostname
  enable-autologin
  enable-fstrim
  schedule-mbsync
}

function main {
  install-packages
  setup-system
  clone-dotfiles
  copy-ssh-key
  copy-netrc
  import-gpg-key
  setup-home
}

[[ -v BASH_SOURCE[0] && ${BASH_SOURCE[0]##*/} != ${0##*/} ]] || main "$@"
