#!/bin/bash
set -eu

characters=fdsagrewcx
pattern=$'\\bh\n?t\n?t\n?p\n?s?\n?:\n?/\n?/\n?'

function read-text {
  local path=$XDG_RUNTIME_DIR/${0##*/}
  local text=$(< "$path")
  rm "$path"

  echo "$text"
}

function parse-urls {
  local text=$1

  local length=${#text}
  local index=0
  while [[ $text =~ $pattern ]]; do
    text=${text#*"${BASH_REMATCH[0]}"}

    local new_length=$((${#text} + ${#BASH_REMATCH[0]}))
    index=$((index + (length - new_length)))
    length=$new_length

    echo "$index"
  done
}

function generate-label {
  local index=$1
  local count=$2

  local digit
  while read -r -n 1 digit; do
    local character=${characters:digit:1}
    local uppercase_character=${character^}
    echo -n "$uppercase_character"
  done < <(printf "%0${#count}d" "$index")
}

function hintify-text {
  local text=$1
  shift
  local positions=("$@")

  local start=$'\e[7m'
  local end=$'\e[m'
  local index=0
  local count=$#
  local position
  for position in "${positions[@]}"; do
    local offset=$((position + index * (${#start} + ${#end})))
    local label=$(generate-label "$index" "$count")
    text=${text::offset}$start$label$end${text:offset + ${#label}}

    ((index += 1))
  done

  echo -n "$text"
}

function output-text {
  local text=$1

  local trimmed_text=${text%$'\n'}
  printf '\e[?25l%s' "$trimmed_text"

  tmux select-window -t url
}

function read-input {
  local text=$1
  shift

  local number=
  local index
  for ((index=0; index < ${##}; index++)); do
    local character
    read -s -n 1 character
    local lowercase_character=${character,}
    [[ $characters == *$lowercase_character* ]] || return

    local tail=${characters%%$lowercase_character*}
    [[ ${#tail} == 0 && ! $number ]] || number+=${#tail}
  done

  local position=${@:number + 1:1}
  echo "$position $character"
}

function join-text {
  local text=$1

  local columns=$(tput cols)
  if [[ ${text##*$'\n'} == *' -- ('*')' ]]; then
    local width=80
    ((columns < width)) || columns=$width
  fi

  local line
  while IFS= read -r line; do
    echo -n "$line"
    [[ ! ${line: -1} =~ [[:space:]] ]] && ((${#line} >= columns)) || echo
  done <<< "$text"
}

function extract-url {
  local text=$1
  local position=$2

  local start=
  local line
  while IFS= read -r line; do
    [[ ! $start ]] || start+=$'\n'
    start+=$(printf "%${#line}s")
  done <<< "${text::position}"

  local new_text=$start${text:position}
  local joined_text=$(join-text "$new_text")

  local start_pattern="^[[:space:]]*($pattern)"
  [[ $joined_text =~ $start_pattern ]]
  local url=${joined_text:${#BASH_REMATCH[0]} - ${#BASH_REMATCH[1]}}

  local parentheses=
  [[ $url == *wiki* ]] || parentheses='()'

  # See https://www.regular-expressions.info/posixbrackets.html
  local url_pattern='^[^[:space:]!"$'\'"$parentheses"'*+,;<>@\\^â€˜{|}~]+'
  [[ $url =~ $url_pattern ]]
  echo "${BASH_REMATCH[0]}"
}

function open-url {
  local url=$1
  local character=$2

  [[ $url ]] || return

  local lowercase_character=${character,}
  if [[ $character != $lowercase_character ]]; then
    echo "$url" >> ~/.urls
    return
  fi

  run-background gio open "$url"
}

function main {
  local text=$(read-text)

  local positions
  mapfile -t positions < <(parse-urls "$text")
  [[ ${positions[@]} ]] || return 0

  local hintified_text=$(hintify-text "$text" "${positions[@]}")
  output-text "$hintified_text"

  local position
  local character
  IFS=' ' read -r position character < <(read-input "$text" "${positions[@]}")

  local url=$(extract-url "$text" "$position")
  open-url "$url" "$character"
}

[[ ${BASH_SOURCE[0]} != $0 ]] || main "$@"
