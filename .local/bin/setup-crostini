#!/bin/bash
set -eu

function install-packages {
  local packages=(
    apcalc
    bash{,-completion}
    bc
    curl
    exiftran
    ffmpeg
    gimp
    git
    gnupg
    graphicsmagick-imagemagick-compat
    htop
    libnotify-bin
    man-db
    mutt
    ncal
    ncdu
    openssh-client
    pass
    python3-pip
    rclone fuse
    ripgrep
    rsync
    rxvt-unicode
    sdcv
    sshuttle
    sxiv
    tmux
    unzip
    vifm
    vim-gtk
    w3m
    wget
    xsel
    zip
  )

  local dpkg_packages=(${packages[@]/%*-})
  ! dpkg -s "${dpkg_packages[@]}" &> /dev/null || return 0

  [[ -d /var/cache/apt/archives ]] || sudo apt update
  sudo DEBIAN_FRONTEND=noninteractive apt -y install "${packages[@]}"
}

function patch-pwdhash {
  sed -i $'s/sys\.stdout\.write(generated.*/import subprocess; subprocess.run([\'xsel\', \'-b\'], input=generated.encode(\'utf8\'))/' "$1"
}

function install-pip-packages {
  local packages=(
    pwdhash.py
    youtube_dl
  )

  local pip_path=~/.pip
  function package-path {
    echo "$pip_path"/lib/python3.*/site-packages/"$1"
  }

  local package
  for package in "${packages[@]}"; do
    local path=$(package-path "$package")
    [[ -e $path ]] || PYTHONUSERBASE=$pip_path pip3 install "$package"

    [[ $package == pwdhash.py ]] || continue

    local path=$(package-path "$package")
    patch-pwdhash "$path"
  done
}

function install-node {
  local prefix=~/.npm
  [[ ! -x $prefix/bin/node ]] || return 0

  local arch=$(arch)
  arch=${arch/aarch64/arm64}
  arch=${arch/x86_64/x64}

  local version=16.0.0
  local url=https://nodejs.org/dist/v$version/node-v$version-linux-$arch.tar.xz
  local path=/tmp/${url##*/}
  wget -O "$path" "$url" || rm -f "$path"

  tar -x -C "${path%/*}" -f "$path"

  NPM_CONFIG_PREFIX=$prefix PATH=${path%.*.*}/bin:$PATH npm install -g node@lts npm
}

function install-npm-completions {
  local path=~/.local/share/bash-completion/completions/npm
  [[ ! -f $path ]] || return 0

  mkdir -p "${path%/*}"
  PATH=~/.npm/bin:$PATH npm completion > "$path"
}

function install-software {
  install-packages
  install-pip-packages
  install-node
  install-npm-completions
}

function update-dotfiles-url {
  sed -i 's|\bhttps://\([^/]*\)/|git@\1:|' ~/.git/config
}

function clone-dotfiles {
  local path=~/.git
  [[ ! -d $path ]] || return 0

  local git=(git -C ~)
  "${git[@]}" init
  "${git[@]}" remote add origin https://github.com/sgtpep/dotfiles2.git
  "${git[@]}" fetch || rm -fr "$path"
  "${git[@]}" checkout -f master
  "${git[@]}" ls-files | grep -Po '.+(?=\.orig$)' | xargs -r -I {} -d '\n' cp ~/{}{.orig,}

  update-dotfiles-url
}

chromeos_path=/mnt/chromeos

keys_path=$chromeos_path/removable/keys

function copy-ssh-key {
  local path=~/.ssh/id_rsa
  [[ ! -f $path ]] || return 0

  cp "$keys_path"/"${path##*/}" "$path"
  chmod 600 "$path"

  until ssh-keygen -p -N '' ${PASSPHRASE+-P "$PASSPHRASE"} -f "$path"; do
    :
  done

  update-dotfiles-url
}

function preconnect-personal {
  ssh -o StrictHostKeyChecking=accept-new personal :
}

function configure-pass {
  local path=$1/.git/hooks/post-commit
  cat > "$path" << \EOF
#!/bin/bash
set -eu

git pull
git push
EOF
  chmod +x "$path"
}

function clone-repositories {
  declare -A repositories=(
    [notes]=~/notes
    [pass]=~/.password-store
  )

  local name
  for name in "${!repositories[@]}"; do
    local path=${repositories[$name]}
    [[ ! -d $path ]] || continue

    ! git clone personal:repositories/"$name".git "$path" || continue

    rm -fr "$path"
    return 1
  done

  configure-pass "${repositories[pass]}"
}

function configure-sommelier {
  local path=~/.config/systemd/user/sommelier-x@0.service.d/override.conf
  mkdir -p "${path%/*}"
  cat > "$path" << \EOF
[Service]
Environment="SOMMELIER_ACCELERATORS=<Alt>Tab,<Control>space,Super_L"
EOF
}

function copy-netrc {
  local path=~/.netrc
  [[ -f $path ]] || scp personal:"${path#~/}" "$path"
}

function download-dictionaries {
  local urls=(http://download.huzheng.org/lingvo/stardict-{ER,RE}-LingvoUniversal-2.4.2.tar.bz2)

  local url
  for url in "${urls[@]}"; do
    local filename=${url##*/}
    local path=~/.stardict/dic/${filename%.*.*}
    [[ ! -d $path ]] || continue

    mkdir -p "$path"
    ! wget -O - "$url" | tar -jx -C "${path%/*}" || continue

    rm -fr "$path"
    return 1
  done
}

function enable-ssh-agent {
  local filename=ssh-agent.socket
  local path=~/.config/systemd/user/${filename%.*}.service
  mkdir -p "${path%/*}"
  cat > "$path" << EOF
[Service]
ExecStart=/usr/bin/ssh-agent -D -a %t/$filename
Type=simple

[Install]
WantedBy=default.target
EOF
  systemctl --user enable "$path"
}

function enable-xrdb {
  local path=~/.config/systemd/user/xrdb.service
  mkdir -p "${path%/*}"
  cat > "$path" << \EOF
[Unit]
After=sommelier-x@0.service
Requires=sommelier-x@0.service

[Service]
ExecStart=xrdb -merge %h/.Xresources
RemainAfterExit=yes
Type=oneshot

[Install]
WantedBy=default.target
EOF
  systemctl --user enable "$path"
}

function fix-icon {
  local path=~/.local/share/applications/rxvt-unicode.desktop
  mkdir -p "${path%/*}"
  cp /usr/share/applications/"${path##*/}" "$path"

  sed -i -f - "$path" << \EOF
s|\(^Icon=\).*|\1/usr/share/icons/Adwaita/512x512/legacy/utilities-terminal.png|
s/\(^Name=\).*/\1Terminal/
EOF
}

function import-gpg-key {
  ! ls ~/.gnupg/private-keys-v1.d/*.key &> /dev/null || return 0

  gpg ${PASSPHRASE+--batch --passphrase "$PASSPHRASE"} --import "$keys_path"/private-key.asc

  local ownertrust="$(gpg -k --with-colons | grep -Po -m 1 '(?<=^fpr:::::::::)[^:]+'):6:"
  gpg --import-ownertrust <<< "$ownertrust"
}

function set-hostname {
  sudo hostnamectl set-hostname localhost
  sudo sed -i 's/, host-name\b//' /etc/dhcp/dhclient.conf
}

function set-terminal-emulator {
  sudo update-alternatives --set x-terminal-emulator /usr/bin/urxvt
}

function symlink-downloads {
  ln -fs "$chromeos_path"/MyFiles/Downloads ~
}

function setup-system {
  clone-repositories
  configure-sommelier
  copy-netrc
  download-dictionaries
  enable-ssh-agent
  enable-xrdb
  fix-icon
  import-gpg-key
  set-hostname
  set-terminal-emulator
  symlink-downloads
}

function main {
  install-software
  clone-dotfiles
  copy-ssh-key
  preconnect-personal
  setup-system
}

[[ -v BASH_SOURCE[0] && ${BASH_SOURCE[0]##*/} != ${0##*/} ]] || main "$@"
