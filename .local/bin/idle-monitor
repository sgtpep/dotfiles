#!/usr/bin/env python
from atexit import register
from dbus import Interface, SessionBus
from dbus.mainloop.glib import DBusGMainLoop
from gi.repository import GLib
from os import remove, system
from os.path import basename, isfile
from subprocess import run
from sys import argv, exit
from tempfile import gettempdir

lock_path = None
minute = 60 * 1000

def get_lock_path():
    temp = gettempdir()
    name = basename(argv[0])
    path = f'{temp}/{name}.lock'
    return path

def get_session_bus():
    DBusGMainLoop(set_as_default=True)
    bus = SessionBus()
    return bus

def add_idle_monitor(bus, lock_path, timeout, on_idle):
    object = bus.get_object('org.gnome.Mutter.IdleMonitor', '/org/gnome/Mutter/IdleMonitor/Core')
    interface = Interface(object, 'org.gnome.Mutter.IdleMonitor')

    idle_id = interface.AddIdleWatch(timeout)
    active_id = None

    def on_watch_fired(id):
        nonlocal active_id
        power_save_mode = None
        if id == idle_id:
            active_id = interface.AddUserActiveWatch()
            if not isfile(lock_path):
                on_idle(True)
        elif id == active_id:
            on_idle(False)

    interface.connect_to_signal('WatchFired', on_watch_fired)

def set_power_save_mode(bus, mode):
    object = bus.get_object('org.gnome.Mutter.DisplayConfig', '/org/gnome/Mutter/DisplayConfig')
    object.Set('org.gnome.Mutter.DisplayConfig', 'PowerSaveMode', mode, dbus_interface='org.freedesktop.DBus.Properties'),

def is_charging():
    is_discharging = open('/sys/class/power_supply/BAT0/status').read().strip() == 'Discharging'
    return not is_discharging

def suspend():
    run('systemctl suspend', shell=True)

def stop_waydroid():
    process = run('lxc-info -Hs -P /var/lib/waydroid/lxc -n waydroid', capture_output=True, encoding='utf8', shell=True)
    if process.stdout != 'STOPPED\n':
        run('waydroid session stop', shell=True)

def run_main_loop():
    loop = GLib.MainLoop()
    loop.run()

def main():
    lock_path = get_lock_path()

    if len(argv) > 1 and argv[1] == 'lock':
        open(lock_path, 'w')
        register(lambda: remove(lock_path))
        run_main_loop()
        exit()

    bus = get_session_bus()
    add_idle_monitor(bus, lock_path, timeout=3 * minute, on_idle=lambda idle: set_power_save_mode(bus, 1 if idle else 0))
    add_idle_monitor(bus, lock_path, timeout=5 * minute, on_idle=lambda idle: idle and not is_charging() and suspend())
    add_idle_monitor(bus, lock_path, timeout=60 * minute, on_idle=lambda idle: idle and stop_waydroid())

    run_main_loop()

if __name__ == '__main__':
    main()
