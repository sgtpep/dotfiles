#!/bin/bash
set -eu

function add-language {
  run-script << \EOF
am start -a android.settings.LOCALE_SETTINGS &> /dev/null
# Add a language
inputs keyevent\ DPAD_{UP,DOWN,CENTER}
wait-ui 'All languages'
# Русский (Россия)
inputs keyevent\ {DPAD_{DOWN{,,},CENTER},BACK}
EOF
}

function change-settings {
  declare -A global_settings=(
    [animator_duration_scale]=0
    [heads_up_notifications_enabled]=0
    [transition_animation_scale]=0
    [wifi_networks_available_notification_on]=0
    [window_animation_scale]=0
  )
  declare -A secure_settings=(
    [assist_gesture_enabled]=0
    [icon_blacklist]=headset,rotate,volume
    [sysui_qs_tiles]=wifi,rotation,flashlight
  )
  declare -A system_settings=(
    [accelerometer_rotation]=0
    [screen_brightness]=25
    [screen_brightness_mode]=0
  )
  local commands=()
  local namespace
  for namespace in global secure system; do
    declare -n settings=${namespace}_settings
    local output=$(adb shell settings list "$namespace")
    local key
    for key in "${!settings[@]}"; do
      [[ $'\n'$output$'\n' == *$'\n'$key=${settings[$key]}$'\n'* ]] || commands+=("settings put $namespace $key ${settings[$key]}")
    done
  done
  [[ ! ${commands[@]} ]] || adb shell "$(printf '%s\n' "${commands[@]}")"
}

function configure-camera {
  run-script com.hmdglobal.app.camera << \EOF
# Skip
input tap 200 1300
wait-ui 'DENY'
# Deny, OK
inputs keyevent\ {TAB,DPAD_CENTER} tap\ 600\ 900
wait-ui 'Settings'
# menu icon, Shutter sound, Photos from rear camera, (4:3) 4MP, Photos from front camera, (4:3) 4MP, Video Resolution, Video from rear camera, HD 720P, Video from front camera, HD 720P
inputs tap\ 50\ 100 keyevent\ {DPAD_{DOWN,CENTER},PAGE_DOWN,DPAD_{CENTER{,},DOWN,CENTER,DOWN,CENTER,DOWN,CENTER},BACK,DPAD_{DOWN,CENTER{,},DOWN,CENTER,DOWN,CENTER,DOWN,CENTER},BACK{,,}}
EOF
}

function configure-system {
  local commands=(
    add-language
    configure-camera
    disable-play-protect
    disable-screen-lock
    disable-sounds
    mute-volume
    set-wallpaper
    setup-sd-card
  )
  run-once "${commands[@]}"
}

function connect-wifi {
  if adb shell dumpsys wifi 2> /dev/null | grep -qx -m 1 'Wi-Fi is disabled'; then
    run-script << \EOF
am start com.android.settings/.wifi.WifiPickerActivity &> /dev/null
# Use Wi-Fi
inputs keyevent\ {DPAD_{UP,CENTER},BACK}
EOF
  fi
  if ! adb shell dumpsys wifi 2> /dev/null | grep -A 1 -m 1 ' Configured networks ' | grep -q '^ID:'; then
    local passphrase=$(wifi-passphrase)
    if [[ $passphrase ]]; then
      run-script << EOF
am start com.android.settings/.wifi.WifiPickerActivity &> /dev/null
# first item
inputs tap\ 0\ 300 text\ '$passphrase' keyevent\ {TAB{,,,},DPAD_CENTER,BACK}
EOF
    fi
  fi
  run-script << \EOF
until ping -c 1 1.1.1.1 &> /dev/null; do
  sleep 1
done
EOF
}

function disable-packages {
  local packages=(
    com.android.{bluetooth,chrome,dreams.{basic,phototable},vending}
    com.google.android.apps.{docs,googleassistant,maps,messaging,nbu.files,photos,turbo,wallpaper,wellbeing}
    com.google.android.{as,calendar,contacts,deskclock,dialer,gm,gms,googlequicksearchbox,ims,inputmethod.latin,tts,youtube}
    com.hmdglobal.{app.{activation,fmradio},support}
  )
  local enabled_packages=$(comm -12 <(adb shell cmd package list packages -e | cut -d : -f 2 | sort) <(printf '%s\n' "${packages[@]}" | sort))
  [[ ! $enabled_packages ]] || adb shell "$(sed 's/^/pm disable-user /' <<< $enabled_packages)"
}

function disable-play-protect {
  run-script << \EOF
am start -a android.settings.SECURITY_SETTINGS &> /dev/null
# Google Play Protect, Scan device for security threats, OK
inputs keyevent\ {DPAD_{UP,CENTER,DOWN,CENTER},TAB{,},DPAD_CENTER,BACK{,}}
EOF
}

function disable-screen-lock {
  run-script << \EOF
am start -a android.settings.SECURITY_SETTINGS &> /dev/null
# Screen lock, None
inputs keyevent\ {DPAD_{UP,DOWN{,,},CENTER{,}},BACK}
EOF
}

function disable-sounds {
  run-script << \EOF
am start -a android.settings.SOUND_SETTINGS &> /dev/null
# Advanced, Dial pad tones, Screen locking sounds, Charging sounds, Touch vibration, Default notification sounds, None, OK
inputs keyevent\ {DPAD_{UP,DOWN{,,,,,,,,},CENTER,DOWN{,},CENTER,DOWN,CENTER,DOWN,CENTER,DOWN{,},CENTER,UP{,,,,,},CENTER},MOVE_HOME,DPAD_CENTER} tap\ 650\ 1350 keyevent\ BACK
EOF
}

function grant-permissions {
  local permissions=($(comm -23 <(printf '%s\n' "${@:2}" | sort) <(adb shell dumpsys package "$1" 2> /dev/null | grep -Po '[^\s]*(?=: granted=true$)' | sort -u)))
  [[ ! ${permissions[@]} ]] || adb shell "$(printf '%s\n' "${permissions[@]/#/pm grant $1 }")"
}

function install-package {
  if ! adb shell cmd package list packages | grep -Fqx "package:$1"; then
    local url=${2:-$(wget -O - https://f-droid.org/en/packages/"$1"/ 2> /dev/null | grep -o -m 1 "[^\"]*/${1//./\\.}_.*\.apk\b")}
    local path=/tmp/$1.apk
    [[ -f $path ]] || wget -O "$path" "$url" || rm -f "$path"
    adb install "$path"
  fi
}

function main {
  connect-wifi
  disable-packages
  uninstall-packages
  change-settings
  configure-system
  setup-packages
}

function mute-volume {
  run-script << \EOF
# mute down
inputs keyevent\ VOLUME_DOWN tap\ 650\ 850
EOF
}

function run-once {
  local settings=$(adb shell settings list global)
  local command
  for command; do
    local key=setup:$command
    if ! grep -Fqx "$key=1" <<< $settings; then
      "$command"
      adb shell settings put global "$key" 1
    fi
  done
}

function run-script {
  local input=$(cat)
  if [[ ${1-} ]]; then
    local url
    if [[ ${2-} == https://* ]]; then
      url=$2
      set -- "$1" "${@:3}"
    fi
    install-package "$1" "${url-}"
    adb shell pm clear "$1"
    grant-permissions "$1" "${@:2}"
  fi
  adb shell "$(
    local options=eu
    [[ $- != *x* ]] || options=${options}x
    echo "set -$options -- ${1-}"
    cat << \EOF
TMPDIR=/data/local/tmp

function disable-notifications {
  am start -a android.settings.APPLICATION_DETAILS_SETTINGS -d package:"$1" &> /dev/null
  # Notifications, Show notifications
  inputs keyevent\ DPAD_{UP,DOWN,CENTER} tap\ 0\ 400 keyevent\ BACK{,}
}

function inputs {
  local arguments
  for arguments; do
    input $arguments
  done
}

function wait-ui {
  local path=/sdcard/window_dump.xml
  while :; do
    uiautomator dump &> /dev/null
    ! grep -Fqs "\"$1\"" "$path" || break
    sleep 1
  done
  rm "$path"
}

dumpsys window 2> /dev/null | grep -q -m 1 ' mAwake=true' || input keyevent POWER
dumpsys window 2> /dev/null | grep -q -m 1 ' mDreamingLockscreen=false' || input keyevent MENU
[[ ! ${1-} ]] || monkey -p "$1" 1 &> /dev/null || :
EOF
    echo "$input"
  )"
}

function set-wallpaper {
  run-script << \EOF
local path=/data/local/tmp/wallpaper.gif
base64 -d <<< 'R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==' > "$path"
am start -d file://"$path" -a android.service.wallpaper.CROP_AND_SET_WALLPAPER -f 0x1 com.android.wallpaperpicker/.WallpaperCropActivity &> /dev/null
# Set wallpaper, Home screen
inputs tap\ 0\ 100 keyevent\ {DPAD_DOWN,MOVE_END,DPAD_CENTER}
rm "$path"
EOF
}

function setup-packages {
  local commands=(
    setup-delta-chat
    setup-f-droid
    setup-fennec
    setup-keikai-launcher
    setup-kiwix
    setup-maps
    setup-pmetro
    setup-simple-gallery
    setup-simple-keyboard
    setup-wifi-automatic
  )
  run-once "${commands[@]}"
}

function setup-delta-chat {
  connect-wifi
  local email=mail'@'danil.mobi
  local imap_hostname=imap.fastmail.com
  local smtp_hostname=smtp.fastmail.com
  run-script com.b44t.messenger android.permission.{CAMERA,READ_CONTACTS,READ_EXTERNAL_STORAGE,RECORD_AUDIO} << EOF
wait-ui 'START MESSAGING'
# Start messaging, Email address, Password, Advanced, IMAP server, SMTP server, confirm icon
inputs tap\ 300\ 1250 text\ $email keyevent\ TAB text\ $(netrc-password "$imap_hostname" "$email") keyevent\ {TAB{,,},DPAD_CENTER,TAB{,}} text\ $imap_hostname keyevent\ TAB{,,,,,} text\ $smtp_hostname tap\ 650\ 100
wait-ui 'Delta Chat'
# menu icon, Settings, Your profile info, Signature text, Select all, confirm icon, Chats and media, Enter key sends, Show classic emails, All, plus icon, Me, OK, close icon
inputs tap\ 650\ 100 keyevent\ {TAB,MOVE_END,DPAD_{CENTER,CENTER}} swipe\ 100\ 400\ 100\ 400\ 500 tap\ 500\ 300 keyevent\ DEL tap\ 650\ 100 keyevent\ {DPAD_{DOWN{,,,,},CENTER,DOWN{,},CENTER,DOWN{,},CENTER,DOWN{,},CENTER},BACK{,}} tap\ {650\ 1350,1\ 400} keyevent\ {TAB{,},DPAD_CENTER,BACK} tap\ 700\ 200 keyevent\ BACK
EOF
}

function setup-f-droid {
  connect-wifi
  run-script org.fdroid.fdroid https://f-droid.org/FDroid.apk << \EOF
inputs swipe\ 0\ 500\ 0\ 1000 keyevent\ BACK
disable-notifications "$1"
EOF
}

function setup-fennec {
  run-script org.mozilla.fennec_fdroid << \EOF
input keyevent MENU
wait-ui 'Report site issue'
# Settings, General, Home, Top Sites, Hide, Bookmarks, Hide, History, Hide, Privacy, Do not track, Tracking Protection, Enabled, Fennec Health Report, No, tabs icon, close icon
inputs keyevent\ {TAB,MOVE_END,DPAD_{UP{,},CENTER,DOWN,CENTER{,},DOWN{,},CENTER,DOWN,CENTER,DOWN,CENTER,DOWN,CENTER,DOWN,CENTER,DOWN,CENTER},BACK{,},DPAD_{DOWN{,},CENTER{,},DOWN{,},CENTER,UP,CENTER},MOVE_END,DPAD_CENTER,BACK{,}} tap\ 100\ 100 text\ - tap\ 500\ 200 keyevent\ BACK{,} tap\ {600\ 100,325\ 200} keyevent\ BACK
disable-notifications "$1"
EOF
}

function setup-keikai-launcher {
  run-script com.anpmech.launcher << \EOF
pm set-home-activity "$1"/.activities.SearchActivity
# Settings, Open keyboard automatically, Allow orientation change
inputs keyevent\ {MENU,DPAD_{CENTER{,},DOWN{,,},CENTER},BACK,HOME}
EOF
}

function setup-kiwix {
  run-script org.kiwix.kiwixmobile android.permission.{READ,WRITE}_EXTERNAL_STORAGE << \EOF
wait-ui 'More options'
# Get Content, Device, Wiktionary
inputs tap\ 100\ 800 swipe\ 0\ 300\ 500\ 300 keyevent\ {DPAD_{DOWN{,},CENTER},BACK}
EOF
}

function setup-maps {
  connect-wifi
  run-script com.github.axet.maps android.permission.{ACCESS_{COARSE,FINE}_LOCATION,{READ,WRITE}_EXTERNAL_STORAGE} << \EOF
path=/sdcard/MapsWithMe
rm -fr "$path"
mkdir "$path"
mountpoint=(/storage/*-*)
cat > "$path"/settings.ini << EOF2
ScreenClipRect=37.6064088837 67.4336744786 0 -0.240503617395 -0.477666906771 0.240503617395 0.477666906771
StoragePath=$mountpoint/${path##*/}/
EOF2
wait-ui 'NEXT'
# Next
inputs keyevent\ {FOCUS,DPAD_CENTER}
wait-ui 'My Position'
input keyevent BACK
EOF
}

function setup-pmetro {
  connect-wifi
  run-script com.utyf.pmetro << \EOF
# Catalog, update icon
inputs keyevent\ DPAD_{UP,RIGHT,CENTER{,}}
wait-ui 'Австралия'
# Россия, Москва, Load, Local Maps, Moscow
inputs keyevent\ {DPAD_DOWN,PAGE_DOWN{,,,,},DPAD_{DOWN,CENTER},PAGE_DOWN,DPAD_{DOWN,CENTER{,}},MOVE_HOME,DPAD_{UP{,},LEFT,CENTER,CENTER},BACK}
EOF
}

function setup-sd-card {
  run-script << \EOF
# SD card, Portable storage, Done, SD Card
inputs keyevent\ HOME swipe\ 0\ 0\ 0\ 1000 tap\ 10\ 600 keyevent\ DPAD_{DOWN{,},CENTER,DOWN,CENTER} swipe\ {0\ 0\ 0\ 1000,10\ 500\ 1000\ 500} keyevent\ BACK
EOF
}

function setup-simple-gallery {
  run-script com.simplemobiletools.gallery.pro android.permission.{READ,WRITE}_EXTERNAL_STORAGE << \EOF
# settings icon, Settings, settings icon, Settings, Customize colors, Theme, OK, Black & White, App icon color, orange, OK, apply icon, Allow instantly changing media by clicking on screen sides, Move items into the Recycle Bin instead of deleting
inputs keyevent\ MENU tap\ 400\ 800 keyevent\ MENU tap\ 400\ 800 keyevent\ {DPAD_{DOWN,CENTER,DOWN,CENTER},TAB,DPAD_{CENTER,DOWN{,,,},CENTER,DOWN{,,,},CENTER}} tap\ 500\ 700 keyevent\ {TAB{,},DPAD_CENTER} tap\ 700\ 100 swipe\ 0\ 850\ 0\ 0{,} keyevent\ DPAD_{DOWN{,},CENTER} swipe\ 0\ 850\ 0\ 0{,} keyevent\ {DPAD_{DOWN{,,},CENTER},BACK{,}}
EOF
}

function setup-simple-keyboard {
  run-script rkr.simplekeyboard.inputmethod << \EOF
# Preferences, Vibrate on keypress, Popup on keypress
inputs keyevent\ {DPAD_{DOWN{,},CENTER,DOWN,CENTER,DOWN{,},CENTER},BACK{,}}

#settings put secure enabled_input_methods "$1"/.latin.LatinIME
#am start com.android.settings/.Settings\$LanguageAndInputSettingsActivity &> /dev/null
## Virtual keyboard, Simple Keyboard, Preferences, Vibrate on keypress, Popup on keypress
#inputs keyevent\ {DPAD_{UP,DOWN,CENTER{,},DOWN,CENTER,DOWN,CENTER,DOWN{,},CENTER},BACK{,,,},HOME}
EOF
}

function setup-wifi-automatic {
  run-script de.j4velin.wifiAutoOff << \EOF
# when device gets unlocked, screen is off, screen is off, 5, OK
inputs keyevent\ {DPAD_{UP,DOWN,CENTER,DOWN{,,,,},CENTER{,}},TAB,5,ENTER,DPAD_CENTER,BACK}
disable-notifications "$1"
EOF
}

function uninstall-packages {
  local packages=(
    com.google.android.apps.{magazines,tachyon,walletnfcrel}
    com.google.android.{calculator,keep,music,videos}
  )
  local installed_packages=$(comm -12 <(adb shell cmd package list packages | cut -d : -f 2 | sort) <(printf '%s\n' "${packages[@]}" | sort))
  [[ ! $installed_packages ]] || adb shell "$(sed 's/^/pm uninstall /' <<< $installed_packages)"
}

function wifi-passphrase {
  local path=/etc/wpa_supplicant/wpa_supplicant.conf
  if [[ -f $path ]]; then
    local paths=(/sys/class/net/wl*)
    sudo grep -A 1 "\bssid=\"$(sudo wpa_cli -i "${paths[0]##*/}" status | grep -Po '(?<=^ssid=).+')\"" "$path" | grep -Po '(?<=\bpsk=")[^"]+'
  fi
}

[[ -v BASH_SOURCE[0] && ${BASH_SOURCE[0]##*/} != ${0##*/} ]] || main "$@"
