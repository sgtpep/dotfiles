#!/bin/bash
set -eu

function add-language {
  run-package com.android.settings
  instruction 'System, Languages & input, Languages, Add a language, Русский'
}

function change-settings {
  declare -A global_settings=(
    [animator_duration_scale]=0
    [heads_up_notifications_enabled]=0
    [transition_animation_scale]=0
    [wifi_networks_available_notification_on]=0
    [window_animation_scale]=0
  )
  declare -A secure_settings=(
    [assist_gesture_enabled]=0
    [icon_blacklist]=headset,rotate,volume
    [sysui_qs_tiles]=wifi,cell,airplane,flashlight
  )
  declare -A system_settings=(
    [screen_brightness_mode]=0
  )
  local commands=()
  local namespace
  for namespace in global secure system; do
    declare -n settings=${namespace}_settings
    local output=$(adb shell settings list "$namespace")
    local key
    for key in "${!settings[@]}"; do
      [[ $'\n'$output$'\n' == *$'\n'$key=${settings[$key]}$'\n'* ]] || commands+=("settings put $namespace $key ${settings[$key]}")
    done
  done
  [[ ! ${commands[@]} ]] || adb shell "$(printf '%s\n' "${commands[@]}")"
}

function configure-camera {
  run-package com.hmdglobal.app.camera
  instruction 'Skip, Deny, OK, menu icon, Shutter sound, Photo Resolution, Photos from rear camera, (4:3) 4MP, Photos from front camera, (4:3) 4MP, Video Resolution, Video from rear camera, HD 720P, Video from front camera, HD 720P'
}

function configure-contacts {
  run-package com.google.android.contacts
  instruction 'Skip'
  package-settings "$package"
  instruction 'Notifications, Google Play services availability'
}

function configure-data-warning {
  run-package com.android.settings
  instruction 'Network & Internet, Data usage, Data warning & limit, Data warning, 500, MB, Set'
}

function configure-messages {
  local package=com.google.android.apps.messaging
  run-package "$package"
  instruction 'menu icon, Settings, Hear outgoing message sounds'
  package-settings "$package"
  instruction 'Notifications, Google Play services availability'
}

function configure-phone {
  local package=com.google.android.dialer
  run-package "$package"
  instruction 'menu icon, Settings, Calling accounts, Answer alert'
  package-settings "$package"
  instruction 'Notifications, Google Play services availability'
}

function configure-system {
  local commands=(
    add-language
    configure-camera
    configure-contacts
    configure-data-warning
    configure-phone
    configure-messages
    configure-time-format
    configure-white-balance
    disable-screen-lock
    disable-sim2
    disable-sounds
    set-wallpaper
    setup-sd-card
  )
  run-once "${commands[@]}"
}

function configure-time-format {
  run-package com.android.settings
  instruction 'System, Date & time, Automatic 24-hour format'
}

function configure-white-balance {
  run-package com.android.settings
  instruction 'Display, White balance, Colour temperature'
}

function disable-packages {
  local packages=(
    android.autoinstalls.config.hmdglobal.panther
    com.android.{bluetooth,chrome,dreams.{basic,phototable},stk,vending}
    com.google.android.apps.{docs,googleassistant,magazines,maps,nbu.files,photos,turbo,wallpaper,wellbeing}
    com.google.android.{as,calendar,gm,gms,googlequicksearchbox,ims,inputmethod.latin,tts,youtube}
    com.hmdglobal.{app.{activation,fmradio},support}
  )
  local enabled_packages=$(comm -12 <(adb shell cmd package list packages -e | cut -d : -f 2 | sort) <(printf '%s\n' "${packages[@]}" | sort))
  [[ ! $enabled_packages ]] || adb shell "$(sed 's/^/pm disable-user /' <<< $enabled_packages)"
}

function disable-screen-lock {
  run-package com.android.settings
  instruction 'Security & location, Screen lock, None'
}

function disable-sim2 {
  run-package com.android.settings
  instruction 'Network & Internet, SIM cards, SIM 2, OK'
}

function disable-sounds {
  run-package com.android.settings
  instruction 'Sound, Also vibrate for calls, Advanced, Default notification sound, None, OK, Dial pad tones, Screen locking sounds, Charging sounds, Touch vibration'
}

function expand-notifications {
  adb shell cmd statusbar expand-notifications
}

function install-package {
  if ! adb shell cmd package list packages | grep -Fqx "package:$1"; then
    local url=${2:-$(wget -O - https://f-droid.org/en/packages/"$1"/ 2> /dev/null | grep -o -m 1 "[^\"]*/${1//./\\.}_.*\.apk\b")}
    local path=/tmp/$1.apk
    [[ -f $path ]] || wget -O "$path" "$url" || rm -f "$path"
    adb install "$path"
  fi
}

function instruction {
  run-script
  echo "$1"
  read -s
  echo
}

function main {
  disable-packages
  uninstall-packages
  change-settings
  configure-system
  setup-packages
}

function package-settings {
  am start -a android.settings.APPLICATION_DETAILS_SETTINGS -d package:"$1" &> /dev/null || :
}

function run-once {
  local settings=$(adb shell settings list global)
  local command
  for command; do
    local key=setup:$command
    if ! grep -Fqx "$key=1" <<< $settings; then
      echo "Running $command"
      "$command"
      adb shell settings put global "$key" 1
    fi
  done
}

function run-package {
  run-script monkey -p "$1" 1 &> /dev/null
}

function run-script {
  local options=eu
  [[ $- != *x* ]] || options=${options}x
  adb shell "set -$options"$'
dumpsys window 2> /dev/null | grep -q -m 1 \' mAwake=true\' || input keyevent POWER
dumpsys window 2> /dev/null | grep -q -m 1 \' mDreamingLockscreen=false\' || input keyevent MENU
'"$@"
}

function set-wallpaper {
  local path=/data/local/tmp/wallpaper.gif
  run-script "
base64 -d <<< 'R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==' > $path
am start -d file://$path -a android.service.wallpaper.CROP_AND_SET_WALLPAPER -f 0x1 com.android.wallpaperpicker/.WallpaperCropActivity &> /dev/null
"
  instruction 'Set wallpaper, Home screen and lock screen'
  adb shell rm "$path"
}

function setup-aurora {
  local package=com.aurora.store
  install-package "$package"
  run-package "$package"
  instruction 'Next, Ask, Allow, Anonymous'
}

function setup-authenticator {
  local package=com.google.android.apps.authenticator2
  install-package "$package" https://github.com/google/google-authenticator-android/releases/download/v5.00/authenticator.apk
  run-package "$package"
  instruction 'Begin, Skip'
}

function setup-bliss-launcher {
  local package=foundation.e.blisslauncher
  install-package "$package"
  adb shell pm disable-user com.android.launcher3
  instruction $'Bliss Launcher, Permit usage access, Deny, Restart, Don\'t ask again, Deny'
}

function setup-delta-chat {
  install-package com.b44t.messenger
  local path=/sdcard/Download/avatar.png
  adb shell curl -o "$path" https://avatars0.githubusercontent.com/u/142021
  run-package com.android.settings
  instruction 'Storage, SD card, long tap delta-chat-*, menu icon, Move to..., Move, Delta Chat, Import backup, Continue, Allow, OK, Device messages, Tap here to receive messages, Allow, menu icon, Settings, Danil Semelenov, camera icon, Allow, Files, Downloads, avatar.png, resize, Done, apply icon, Notifications, In-chat sounds'
  adb shell rm "$path" /sdcard/Download/delta-chat-\*
}

function setup-f-droid {
  local package=org.fdroid.fdroid
  install-package "$package" https://f-droid.org/FDroid.apk
  run-package "$package"
  instruction 'Updates, Update, Settings, Allow from this source, Install'
}

function setup-fennec {
  local package=org.fdroid.fdroid
  install-package "$package"
  run-package "$package"
  instruction 'menu icon, Settings, General, Home, Top Sites, Hide, Bookmarks, Hide, History, Hide, Search, Bing, Remove, Amazon.ca, Remove, DuckDuckGo, Remove, Twitter, Remove, Wikipedia, Remove, Show search suggestions, Privacy, Do not track, Tracking Protection, Enabled, Fennec Health Report'
  expand-notifications
  instruction 'Clear all'
}

function setup-forcedoze {
  local package=com.suyashsrijan.forcedoze
  install-package "$package"
  local permission
  for permission in android.permission.{DUMP,WRITE_SECURE_SETTINGS}; do
    adb shell pm grant "$package" "$permission"
  done
  run-package "$package"
  instruction 'OK, menu icon, Settings, Show persistent notification, Disable WiFi during Doze, Disable motion sensing for Doze, toggle, OKAY'
  expand-notifications
  instruction $'ForceDoze, Not optimised, All apps, ForceDoze, Don\'t optimise, Done, Notifications'
  expand-notifications
  instruction 'Clear all'
}

function setup-kiwix {
  local package=org.kiwix.kiwixmobile
  install-package "$package"
  run-package "$package"
  instruction 'menu icon, Get Content, Allow, Wiktionary'
}

function setup-mupdf-viewer {
  local package=com.artifex.mupdf.viewer.app
  install-package "$package"
  run-package "$package"
  instruction 'Allow'
}

function setup-obsqr {
  local package=trikita.obsqr
  install-package "$package"
  run-package "$package"
  instruction 'Allow'
}

function setup-osmand {
  local package=trikita.obsqr
  install-package "$package"
  run-package "$package"
  instruction 'Get started, Change, Allow, Memory card, Download, Show map, target icon, Allow'
}

function setup-packages {
  local commands=(
    setup-aurora
    setup-authenticator
    setup-bliss-launcher
    setup-delta-chat
    setup-f-droid
    setup-fennec
    setup-forcedoze
    setup-kiwix
    setup-mupdf-viewer
    setup-obsqr
    setup-osmand
    setup-simple-gallery
    setup-simple-keyboard
    setup-slack
  )
  run-once "${commands[@]}"
}

function setup-sd-card {
  expand-notifications
  instruction 'SD card, Portable storage, Done'
  expand-notifications
  instruction 'Clear all'
}

function setup-simple-gallery {
  local package=com.simplemobiletools.gallery.pro
  install-package "$package"
  run-package "$package"
  instruction 'allow, menu icon, Settings, Customize colors, Theme, OK, Black & White, App icon color, orange, OK, apply icon, Allow instantly changing media by clicking on screen sides, Move items into the Recycle Bin instead of deleting'
}

function setup-simple-keyboard {
  local package=rkr.simplekeyboard.inputmethod
  install-package "$package"
  run-package "$package"
  instruction 'OK, Simple Keyboard, OK, OK, Preferences, Vibrate on keypress, Popup on keypress'
}

function setup-slack {
  run-package com.aurora.store
  instruction $'Search apps & games, Slack, Install, Settings, Allow from this source, Install'
  expand-notifications 'Clear all'
  local package=com.Slack
  run-package "$package"
  instruction $'Sign in, I\'ll sign in manually, Workspace URL, Sign in with Google, Email or phone, Password, Sign in, Enter the 6-digit code, Done, OK, Fennec F-Droid, google.com, Sign out'
  package-settings "$package"
  instruction 'Notifications, Google Play services availability'
}

function uninstall-packages {
  local packages=(
    com.google.android.apps.{tachyon,walletnfcrel}
    com.google.android.{calculator,keep,music,videos}
  )
  local installed_packages=$(comm -12 <(adb shell cmd package list packages | cut -d : -f 2 | sort) <(printf '%s\n' "${packages[@]}" | sort))
  [[ ! $installed_packages ]] || adb shell "$(sed 's/^/pm uninstall /' <<< $installed_packages)"
}

[[ -v BASH_SOURCE[0] && ${BASH_SOURCE[0]##*/} != ${0##*/} ]] || main "$@"
