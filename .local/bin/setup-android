#!/bin/bash
set -eu

function adb-input {
  adb shell "$(
    local options=eu
    [[ $- != *x* ]] || options=${options}x
    echo "set -$options"
    cat << \EOF
dumpsys window 2> /dev/null | grep -q -m 1 ' mAwake=true' || input keyevent KEYCODE_POWER
dumpsys window 2> /dev/null | grep -q -m 1 ' mDreamingLockscreen=false' || input keyevent KEYCODE_MENU
TMPDIR=/sdcard
EOF
    cat
  )"
}

function change-settings {
  declare -A global=(
    [animator_duration_scale]=0
    [transition_animation_scale]=0
    [wifi_networks_available_notification_on]=0
    [window_animation_scale]=0
  )
  declare -A secure=(
    [enabled_input_methods]=rkr.simplekeyboard.inputmethod/.latin.LatinIME
    [icon_blacklist]=volume
    [install_non_market_apps]=1
    [sysui_qs_tiles]=wifi,location,rotation,flashlight
  )
  declare -A system=(
    [screen_brightness]=25
    [screen_brightness_mode]=0
  )
  local namespaces=(global secure system)
  local checksum=$(declare -p "${namespaces[@]}" | md5sum | cut -d ' ' -f 1)
  local checksum_key=settings_checksum
  if [[ $(adb shell settings list global | grep -Po "(?<=^$checksum_key=).*") != $checksum ]]; then
    local commands=()
    local namespace
    for namespace in "${namespaces[@]}"; do
      declare -n settings=$namespace
      local output=$(adb shell settings list "$namespace")
      local key
      for key in "${!settings[@]}"; do
        [[ $'\n'$output$'\n' == *$'\n'$key=${settings[$key]}$'\n'* ]] || commands+=("settings put $namespace $key ${settings[$key]}")
      done
    done
    [[ ! ${commands[@]} ]] || adb shell "$(printf '%s\n' "${commands[@]}")"
    adb shell settings put global "$checksum_key" "$checksum"
  fi
}

function configure-apps {
  local names=(
    camera
    camera-roll
    f-droid
    keikai-launcher
    maps
    simple-keyboard
    wifi-automatic
  )
  configure-once "${names[@]}"
}

function configure-camera {
  adb-input << \EOF
monkey -p com.hmdglobal.app.camera 1 &> /dev/null
# Skip
input tap 200 1300
sleep 1
# Deny, menu icon, Shutter sound, Photo Resolution, Photos from rear camera, (4:3) 4MP, Photos from front camera, (4:3) 4MP, Video Resolution, Video from rear camera, HD 720P, Video from front camera, HD 720P
for arguments in tap\ {400\ 850,200\ 1300,50\ 100,1\ 300} swipe\ 0\ 1000\ 0\ 0 tap\ {1\ {900,200},100\ 750,1\ 400,100\ 750} keyevent\ KEYCODE_BACK tap\ {1\ {1100,200},100\ 800,1\ 400,100\ 800} keyevent\ KEYCODE_BACK{,,}; do
  input $arguments
done
EOF
}

function configure-camera-roll {
  adb-input << \EOF
am start us.koller.cameraroll/.ui.MainActivity
# settings icon, Settings, Theme, Black, Style, Nested RecyclerView, OK, Show Animations
for arguments in tap\ {650\ 100,500\ 450,0\ 500,200\ 850,0\ 700} swipe\ 500\ 500\ 0\ 500{,,} tap\ {600\ 1350,0\ 1000} keyevent\ KEYCODE_BACK{,}; do
  input $arguments
done
EOF
}

function configure-f-droid {
  adb-input << \EOF
am start -d package:org.fdroid.fdroid -n com.android.settings/.Settings\$ManageAppExternalSourcesActivity
# Allow from this source
for arguments in tap\ 0\ 400 keyevent\ KEYCODE_BACK; do
  input $arguments
done
EOF
}

function configure-keikai-launcher {
  adb-input << \EOF
activity=com.anpmech.launcher/.activities.SearchActivity
am start "$activity"
pm set-home-activity "$activity"
# menu icon, Settings, Open keyboard automatically, Allow orientation change
for arguments in tap\ {650\ 150{,},1\ {300,600}} keyevent\ {KEYCODE_BACK,KEYCODE_HOME}; do
  input $arguments
done
EOF
}

function configure-languages {
  adb-input << \EOF
am start -a android.settings.LOCALE_SETTINGS &> /dev/null
# Add a language
input tap 0 400
sleep 1
# search icon, Русский (Россия)
for arguments in tap\ 650\ 100 text\ rus tap\ 1\ 200 keyevent\ KEYCODE_BACK; do
  input $arguments
done
EOF
}

function configure-maps {
  adb-input << \EOF
am start com.github.axet.maps/com.mapswithme.maps.SplashActivity &> /dev/null
false
## search icon, Русский (Россия)
#for arguments in tap\ 650\ 100 text\ rus tap\ 1\ 200 keyevent\ KEYCODE_BACK; do
#  input $arguments
#done
EOF
}

function configure-mute {
  adb-input << \EOF
# volume down, bell icon, vibration icon
for arguments in keyevent\ KEYCODE_VOLUME_DOWN tap\ 650\ 500{,}; do
  input $arguments
done
EOF
}

function configure-once {
  local settings=$(adb shell settings list global)
  local name
  for name; do
    local key=${name//-/_}_configured
    if ! grep -Fqx "$key=1" <<< $settings; then
      configure-"$name"
      adb shell settings put global "$key" 1
    fi
  done
}

function configure-play-protect {
  adb-input << \EOF
am start -a android.settings.SECURITY_SETTINGS &> /dev/null
# Google Play Protect, Scan device for security threats
for arguments in tap\ {0\ {300,500},600\ 800} keyevent\ KEYCODE_BACK{,}; do
  input $arguments
done
EOF
}

function configure-screen-lock {
  adb-input << \EOF
am start -a android.settings.SECURITY_SETTINGS &> /dev/null
# Screen lock, None
for arguments in tap\ 0\ {800,200} keyevent\ KEYCODE_BACK; do
  input $arguments
done
EOF
}

function configure-simple-keyboard {
  adb-input << \EOF
am start com.android.settings/.Settings\$LanguageAndInputSettingsActivity &> /dev/null
# Virtual keyboard, Simple Keyboard, Preferences, Vibrate on keypress, Popup on keypress
for arguments in tap\ {0\ 500,1\ {200,350{,},550}} keyevent\ KEYCODE_BACK{,,,}; do
  input $arguments
done
EOF
}

function configure-sounds {
  adb-input << \EOF
am start -a android.settings.SOUND_SETTINGS &> /dev/null
# Advanced, Default notification sounds, None, OK, Dial pad tones, Screen locking sounds, Charging sounds, Touch vibration
for arguments in swipe\ 0\ 1000\ 0\ 0 tap\ 0\ 1400 swipe\ 0\ 1000\ 0\ 0 tap\ 0\ 600 swipe\ 0\ 1000\ 0\ 2000 tap\ {1\ 200,650\ 1350} tap\ 0\ {900,1000,1100,1400} keyevent\ KEYCODE_BACK; do
  input $arguments
done
EOF
}

function configure-system {
  local names=(
    languages
    mute
    play-protect
    screen-lock
    sounds
    wallpaper
  )
  configure-once "${names[@]}"
}

function configure-wallpaper {
  adb-input << \EOF
local path=/data/local/tmp/wallpaper.gif
base64 -d <<< 'R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==' > "$path"
am start -d file://"$path" -a android.service.wallpaper.CROP_AND_SET_WALLPAPER -f 0x1 com.android.wallpaperpicker/.WallpaperCropActivity
# Set wallpaper, Home screen
for arguments in tap\ 0\ 100 keyevent\ {KEYCODE_DPAD_DOWN,KEYCODE_DPAD_CENTER}; do
  input $arguments
done
EOF
}

function connect-wifi {
  local passphrase=$(wifi-passphrase)
  if [[ $passphrase ]]; then
    enable-wifi
    if ! adb shell dumpsys wifi 2> /dev/null | grep -x -A 1 -m 1 'Configured networks' | grep -q '\bID:'; then
      adb-input << EOF
am start com.android.settings/.wifi.WifiPickerActivity &> /dev/null
# first item, Connect
for arguments in tap\ 0\ 300 text\ '$passphrase' tap\ 600\ 750 keyevent\ KEYCODE_BACK; do
  input \$arguments
done
until ping -c 1 1.1.1.1 &> /dev/null; do
  sleep 1
done
EOF
    fi
  fi
}

function configure-wifi-automatic {
  adb-input << \EOF
package=de.j4velin.wifiAutoOff
am start "$package"/.Preferences &> /dev/null
# Turn WiFi on... when device gets unlocked, Turn WiFi off when... screen is off, Turn WiFi off when... screen is off, 10, 5, OK
for arguments in tap\ {1\ {600,1300{,}},350\ 700} text\ 5 tap\ 600\ 750 keyevent\ KEYCODE_BACK; do
  input $arguments
done
am start -a android.settings.APPLICATION_DETAILS_SETTINGS -d package:"$package"
# Notifications, Show notifications
for arguments in tap\ 0\ {550,400} keyevent\ KEYCODE_BACK{,}; do
  input $arguments
done
EOF
}

function disable-apps {
  local apps=(
    com.android.{bluetooth,chrome,vending}
    com.google.android.apps.{docs,googleassistant,maps,messaging,nbu.files,photos,wallpaper,wellbeing}
    com.google.android.{as,calendar,contacts,deskclock,dialer,gm,googlequicksearchbox,inputmethod.latin,youtube}
    com.hmdglobal.{activation,app.fmradio,support}
  )
  local enabled_apps=$(comm -12 <(adb shell cmd package list packages -e | cut -d : -f 2 | sort) <(printf '%s\n' "${apps[@]}" | sort))
  [[ ! $enabled_apps ]] || adb shell "$(sed 's/^/pm disable-user /' <<< $enabled_apps)"
}

function enable-wifi {
  if adb shell dumpsys wifi 2> /dev/null | grep -qx -m 1 'Wi-Fi is disabled'; then
    adb-input << \EOF
am start com.android.settings/.wifi.WifiPickerActivity &> /dev/null
# Use Wi-Fi
for arguments in tap\ 0\ 200 keyevent\ KEYCODE_BACK; do
  input $arguments
done
EOF
  fi
}

function grant-permissions {
  declare -A permissions=(
    [com.github.axet.maps]=android.permission.{ACCESS_{COARSE,FINE}_LOCATION,{READ,WRITE}_EXTERNAL_STORAGE}
    [us.koller.cameraroll]=android.permission.{READ,WRITE}_EXTERNAL_STORAGE
  )
  local checksum=$(declare -p permissions | md5sum | cut -d ' ' -f 1)
  local checksum_key=permissions_checksum
  if [[ $(grep -Po "(?<=^$checksum_key=).*" <<< $1) != $checksum ]]; then
    local commands=()
    local app
    for app in "${!permissions[@]}"; do
      ungranted=($(comm -23 <(eval "printf '%s\n' ${permissions[$app]}" | sort) <(adb shell dumpsys package "$app" 2> /dev/null | grep -Po '[^\s]*(?=: granted=true$)' | sort -u)))
      commands+=("${ungranted[@]/#/pm grant $app }")
    done
    [[ ! ${commands[@]} ]] || adb shell "$(printf '%s\n' "${commands[@]}")"
    adb shell settings put global "$checksum_key" "$checksum"
  fi
}

function install-apps {
  declare -A apps=(
    [com.anpmech.launcher]=
    [com.github.axet.maps]=
    [de.j4velin.wifiAutoOff]=
    [org.fdroid.fdroid]=https://f-droid.org/FDroid.apk
    [rkr.simplekeyboard.inputmethod]=
    [us.koller.cameraroll]=
  )
  local packages=$(adb shell cmd package list packages)
  local app
  for app in "${!apps[@]}"; do
    if ! grep -Fqx "package:$app" <<< $packages; then
      local url=${apps[$app]:-$(wget -O - https://f-droid.org/en/packages/"$app"/ 2> /dev/null | grep -o -m 1 "[^\"]*/${app//./\\.}_.*\.apk\b")}
      [[ -f /tmp/$app.apk ]] || wget -O /tmp/"$app".apk "$url"
      adb install /tmp/"$app".apk
    fi
  done
}

function main {
  disable-apps
  install-apps
  change-settings
  grant-permissions
  configure-system
  configure-apps
  connect-wifi
}

function wifi-passphrase {
  local path=/etc/wpa_supplicant/wpa_supplicant.conf
  if [[ -f $path ]]; then
    local paths=(/sys/class/net/wl*)
    sudo grep -A 1 "\bssid=\"$(sudo wpa_cli -i "${paths[0]##*/}" status | grep -Po '(?<=^ssid=).+')\"" "$path" | grep -Po '(?<=\bpsk=")[^"]+'
  fi
}

[[ -v BASH_SOURCE[0] && ${BASH_SOURCE[0]##*/} != ${0##*/} ]] || main "$@"
