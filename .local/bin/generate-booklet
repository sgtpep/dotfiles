#!/bin/bash
set -eu

function concatenate-ranges {
  pdfjoin -o "$1" "${@:2}"
  rm -f "${@:2}"
}

function generate-booklet {
  install-packages ghostscript texlive-extra-utils
  pdfbook2 -b 0 -i 0 -o 0 -t 0 "$1"
  mv "${1%.pdf}"-book.pdf "$2"
}

function generate-range {
  local path=${1%.pdf}.$2.pdf
  if [[ $2 == {} ]]; then
    pdfjoin -o "$path" "$1" {},1
    pdfjoin -o "$path"{~,} 1
    mv "$path"{~,}
  elif [[ $2 == ^ || $2 == ^- ]]; then
    local cover=${1%.pdf}.$3.pdf
    [[ $2 != ^ ]] || pdfjoin -o "$path" "$cover" 1
    pdfjoin -o "$cover"{~,} 2-
    mv "$cover"{~,}
  else
    pdfjoin -o "$path" "$1" "${2%x2}"
    if [[ $2 == *x2 ]]; then
      install-packages mupdf-tools
      if ! mutool poster -x 2 "$path"{,~}; then
        install-packages pdfposter
        pdfposter -p 2x1a4 "$path"{,~}
      fi
      mv "$path"{~,}
    fi
  fi
  [[ $2 == ^- ]] || echo "$path"
}

function generate-ranges {
  local range
  for range in "${@:2}"; do
    generate-range "$1" "$range" "$2"
  done
}

function main {
  if [[ $@ ]]; then
    local paths
    mapfile -t paths < <(generate-ranges "$@")
    [[ ${paths[@]} ]]
    normalize-size "${paths[@]}"
    local path=${1%.pdf}.preview.pdf
    concatenate-ranges "$path" "${paths[@]}"
  else
    local path=$1
  fi
  generate-booklet "$path" "${1%.pdf}".book.pdf
}

function normalize-size {
  local width height
  read width height < <(page-size "$@")
  local path
  for path; do
    pdfjam -o "$path"~ --papersize "{${width}pt,${height}pt}" "$path"
    mv "$path"{~,}
  done
}

function page-size {
  local path=${@: -1}
  [[ $path != *.^.pdf ]] || path=${@: -2:1}
  install-packages poppler-utils
  pdfinfo "$path" | grep -Po -m 1 '[\d.]+ x [\d.]+' | sed 's/ x / /'
}

function pdfjam {
  install-packages texlive-extra-utils
  local output=$(command "${FUNCNAME[0]}" "$@" 2>&1)
  echo "$output" >&2
  [[ $output != *' pdfjam ERROR:'* ]]
}

function pdfjoin {
  pdfjam --fitpaper true "$@"
}

[[ -v BASH_SOURCE[0] && ${BASH_SOURCE[0]##*/} != ${0##*/} ]] || main "$@"
